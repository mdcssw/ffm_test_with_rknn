// Generated by jextract

package org.rknn;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _rknn_sdk_version {
 *     char api_version[256];
 *     char drv_version[256];
 * }
 * }
 */
public class _rknn_sdk_version {

    _rknn_sdk_version() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(256, rknn_matmul_api_h.C_CHAR).withName("api_version"),
        MemoryLayout.sequenceLayout(256, rknn_matmul_api_h.C_CHAR).withName("drv_version")
    ).withName("_rknn_sdk_version");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout api_version$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("api_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char api_version[256]
     * }
     */
    public static final SequenceLayout api_version$layout() {
        return api_version$LAYOUT;
    }

    private static final long api_version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char api_version[256]
     * }
     */
    public static final long api_version$offset() {
        return api_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char api_version[256]
     * }
     */
    public static MemorySegment api_version(MemorySegment struct) {
        return struct.asSlice(api_version$OFFSET, api_version$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char api_version[256]
     * }
     */
    public static void api_version(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, api_version$OFFSET, api_version$LAYOUT.byteSize());
    }

    private static long[] api_version$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char api_version[256]
     * }
     */
    public static long[] api_version$dimensions() {
        return api_version$DIMS;
    }
    private static final VarHandle api_version$ELEM_HANDLE = api_version$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char api_version[256]
     * }
     */
    public static byte api_version(MemorySegment struct, long index0) {
        return (byte)api_version$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char api_version[256]
     * }
     */
    public static void api_version(MemorySegment struct, long index0, byte fieldValue) {
        api_version$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout drv_version$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("drv_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char drv_version[256]
     * }
     */
    public static final SequenceLayout drv_version$layout() {
        return drv_version$LAYOUT;
    }

    private static final long drv_version$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char drv_version[256]
     * }
     */
    public static final long drv_version$offset() {
        return drv_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char drv_version[256]
     * }
     */
    public static MemorySegment drv_version(MemorySegment struct) {
        return struct.asSlice(drv_version$OFFSET, drv_version$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char drv_version[256]
     * }
     */
    public static void drv_version(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, drv_version$OFFSET, drv_version$LAYOUT.byteSize());
    }

    private static long[] drv_version$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char drv_version[256]
     * }
     */
    public static long[] drv_version$dimensions() {
        return drv_version$DIMS;
    }
    private static final VarHandle drv_version$ELEM_HANDLE = drv_version$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char drv_version[256]
     * }
     */
    public static byte drv_version(MemorySegment struct, long index0) {
        return (byte)drv_version$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char drv_version[256]
     * }
     */
    public static void drv_version(MemorySegment struct, long index0, byte fieldValue) {
        drv_version$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

