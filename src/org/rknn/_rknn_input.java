// Generated by jextract

package org.rknn;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _rknn_input {
 *     uint32_t index;
 *     void *buf;
 *     uint32_t size;
 *     uint8_t pass_through;
 *     rknn_tensor_type type;
 *     rknn_tensor_format fmt;
 * }
 * }
 */
public class _rknn_input {

    _rknn_input() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        rknn_matmul_api_h.C_INT.withName("index"),
        MemoryLayout.paddingLayout(4),
        rknn_matmul_api_h.C_POINTER.withName("buf"),
        rknn_matmul_api_h.C_INT.withName("size"),
        rknn_matmul_api_h.C_CHAR.withName("pass_through"),
        MemoryLayout.paddingLayout(3),
        rknn_matmul_api_h.C_INT.withName("type"),
        rknn_matmul_api_h.C_INT.withName("fmt")
    ).withName("_rknn_input");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t index
     * }
     */
    public static final OfInt index$layout() {
        return index$LAYOUT;
    }

    private static final long index$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t index
     * }
     */
    public static final long index$offset() {
        return index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t index
     * }
     */
    public static int index(MemorySegment struct) {
        return struct.get(index$LAYOUT, index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t index
     * }
     */
    public static void index(MemorySegment struct, int fieldValue) {
        struct.set(index$LAYOUT, index$OFFSET, fieldValue);
    }

    private static final AddressLayout buf$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *buf
     * }
     */
    public static final AddressLayout buf$layout() {
        return buf$LAYOUT;
    }

    private static final long buf$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *buf
     * }
     */
    public static final long buf$offset() {
        return buf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *buf
     * }
     */
    public static MemorySegment buf(MemorySegment struct) {
        return struct.get(buf$LAYOUT, buf$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *buf
     * }
     */
    public static void buf(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buf$LAYOUT, buf$OFFSET, fieldValue);
    }

    private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static final OfInt size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static int size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static void size(MemorySegment struct, int fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final OfByte pass_through$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pass_through"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t pass_through
     * }
     */
    public static final OfByte pass_through$layout() {
        return pass_through$LAYOUT;
    }

    private static final long pass_through$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t pass_through
     * }
     */
    public static final long pass_through$offset() {
        return pass_through$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t pass_through
     * }
     */
    public static byte pass_through(MemorySegment struct) {
        return struct.get(pass_through$LAYOUT, pass_through$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t pass_through
     * }
     */
    public static void pass_through(MemorySegment struct, byte fieldValue) {
        struct.set(pass_through$LAYOUT, pass_through$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rknn_tensor_type type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rknn_tensor_type type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rknn_tensor_type type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rknn_tensor_type type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt fmt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fmt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rknn_tensor_format fmt
     * }
     */
    public static final OfInt fmt$layout() {
        return fmt$LAYOUT;
    }

    private static final long fmt$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rknn_tensor_format fmt
     * }
     */
    public static final long fmt$offset() {
        return fmt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rknn_tensor_format fmt
     * }
     */
    public static int fmt(MemorySegment struct) {
        return struct.get(fmt$LAYOUT, fmt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rknn_tensor_format fmt
     * }
     */
    public static void fmt(MemorySegment struct, int fieldValue) {
        struct.set(fmt$LAYOUT, fmt$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

