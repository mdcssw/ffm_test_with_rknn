// Generated by jextract

package org.rknn;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _rknn_input_range {
 *     uint32_t index;
 *     uint32_t shape_number;
 *     rknn_tensor_format fmt;
 *     char name[256];
 *     uint32_t dyn_range[512][16];
 *     uint32_t n_dims;
 * }
 * }
 */
public class _rknn_input_range {

    _rknn_input_range() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        rknn_matmul_api_h.C_INT.withName("index"),
        rknn_matmul_api_h.C_INT.withName("shape_number"),
        rknn_matmul_api_h.C_INT.withName("fmt"),
        MemoryLayout.sequenceLayout(256, rknn_matmul_api_h.C_CHAR).withName("name"),
        MemoryLayout.sequenceLayout(512, MemoryLayout.sequenceLayout(16, rknn_matmul_api_h.C_INT)).withName("dyn_range"),
        rknn_matmul_api_h.C_INT.withName("n_dims")
    ).withName("_rknn_input_range");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t index
     * }
     */
    public static final OfInt index$layout() {
        return index$LAYOUT;
    }

    private static final long index$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t index
     * }
     */
    public static final long index$offset() {
        return index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t index
     * }
     */
    public static int index(MemorySegment struct) {
        return struct.get(index$LAYOUT, index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t index
     * }
     */
    public static void index(MemorySegment struct, int fieldValue) {
        struct.set(index$LAYOUT, index$OFFSET, fieldValue);
    }

    private static final OfInt shape_number$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shape_number"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t shape_number
     * }
     */
    public static final OfInt shape_number$layout() {
        return shape_number$LAYOUT;
    }

    private static final long shape_number$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t shape_number
     * }
     */
    public static final long shape_number$offset() {
        return shape_number$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t shape_number
     * }
     */
    public static int shape_number(MemorySegment struct) {
        return struct.get(shape_number$LAYOUT, shape_number$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t shape_number
     * }
     */
    public static void shape_number(MemorySegment struct, int fieldValue) {
        struct.set(shape_number$LAYOUT, shape_number$OFFSET, fieldValue);
    }

    private static final OfInt fmt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fmt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rknn_tensor_format fmt
     * }
     */
    public static final OfInt fmt$layout() {
        return fmt$LAYOUT;
    }

    private static final long fmt$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rknn_tensor_format fmt
     * }
     */
    public static final long fmt$offset() {
        return fmt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rknn_tensor_format fmt
     * }
     */
    public static int fmt(MemorySegment struct) {
        return struct.get(fmt$LAYOUT, fmt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rknn_tensor_format fmt
     * }
     */
    public static void fmt(MemorySegment struct, int fieldValue) {
        struct.set(fmt$LAYOUT, fmt$OFFSET, fieldValue);
    }

    private static final SequenceLayout name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static final SequenceLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.asSlice(name$OFFSET, name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, name$OFFSET, name$LAYOUT.byteSize());
    }

    private static long[] name$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static long[] name$dimensions() {
        return name$DIMS;
    }
    private static final VarHandle name$ELEM_HANDLE = name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static byte name(MemorySegment struct, long index0) {
        return (byte)name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static void name(MemorySegment struct, long index0, byte fieldValue) {
        name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout dyn_range$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("dyn_range"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t dyn_range[512][16]
     * }
     */
    public static final SequenceLayout dyn_range$layout() {
        return dyn_range$LAYOUT;
    }

    private static final long dyn_range$OFFSET = 268;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t dyn_range[512][16]
     * }
     */
    public static final long dyn_range$offset() {
        return dyn_range$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t dyn_range[512][16]
     * }
     */
    public static MemorySegment dyn_range(MemorySegment struct) {
        return struct.asSlice(dyn_range$OFFSET, dyn_range$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t dyn_range[512][16]
     * }
     */
    public static void dyn_range(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dyn_range$OFFSET, dyn_range$LAYOUT.byteSize());
    }

    private static long[] dyn_range$DIMS = { 512, 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t dyn_range[512][16]
     * }
     */
    public static long[] dyn_range$dimensions() {
        return dyn_range$DIMS;
    }
    private static final VarHandle dyn_range$ELEM_HANDLE = dyn_range$LAYOUT.varHandle(sequenceElement(), sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t dyn_range[512][16]
     * }
     */
    public static int dyn_range(MemorySegment struct, long index0, long index1) {
        return (int)dyn_range$ELEM_HANDLE.get(struct, 0L, index0, index1);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t dyn_range[512][16]
     * }
     */
    public static void dyn_range(MemorySegment struct, long index0, long index1, int fieldValue) {
        dyn_range$ELEM_HANDLE.set(struct, 0L, index0, index1, fieldValue);
    }

    private static final OfInt n_dims$LAYOUT = (OfInt)$LAYOUT.select(groupElement("n_dims"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t n_dims
     * }
     */
    public static final OfInt n_dims$layout() {
        return n_dims$LAYOUT;
    }

    private static final long n_dims$OFFSET = 33036;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t n_dims
     * }
     */
    public static final long n_dims$offset() {
        return n_dims$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t n_dims
     * }
     */
    public static int n_dims(MemorySegment struct) {
        return struct.get(n_dims$LAYOUT, n_dims$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t n_dims
     * }
     */
    public static void n_dims(MemorySegment struct, int fieldValue) {
        struct.set(n_dims$LAYOUT, n_dims$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

