// Generated by jextract

package org.rknn;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _rknn_mem_size {
 *     uint32_t total_weight_size;
 *     uint32_t total_internal_size;
 *     uint64_t total_dma_allocated_size;
 *     uint32_t total_sram_size;
 *     uint32_t free_sram_size;
 *     uint32_t reserved[10];
 * }
 * }
 */
public class _rknn_mem_size {

    _rknn_mem_size() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        rknn_matmul_api_h.C_INT.withName("total_weight_size"),
        rknn_matmul_api_h.C_INT.withName("total_internal_size"),
        rknn_matmul_api_h.C_LONG.withName("total_dma_allocated_size"),
        rknn_matmul_api_h.C_INT.withName("total_sram_size"),
        rknn_matmul_api_h.C_INT.withName("free_sram_size"),
        MemoryLayout.sequenceLayout(10, rknn_matmul_api_h.C_INT).withName("reserved")
    ).withName("_rknn_mem_size");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt total_weight_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("total_weight_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t total_weight_size
     * }
     */
    public static final OfInt total_weight_size$layout() {
        return total_weight_size$LAYOUT;
    }

    private static final long total_weight_size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t total_weight_size
     * }
     */
    public static final long total_weight_size$offset() {
        return total_weight_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t total_weight_size
     * }
     */
    public static int total_weight_size(MemorySegment struct) {
        return struct.get(total_weight_size$LAYOUT, total_weight_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t total_weight_size
     * }
     */
    public static void total_weight_size(MemorySegment struct, int fieldValue) {
        struct.set(total_weight_size$LAYOUT, total_weight_size$OFFSET, fieldValue);
    }

    private static final OfInt total_internal_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("total_internal_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t total_internal_size
     * }
     */
    public static final OfInt total_internal_size$layout() {
        return total_internal_size$LAYOUT;
    }

    private static final long total_internal_size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t total_internal_size
     * }
     */
    public static final long total_internal_size$offset() {
        return total_internal_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t total_internal_size
     * }
     */
    public static int total_internal_size(MemorySegment struct) {
        return struct.get(total_internal_size$LAYOUT, total_internal_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t total_internal_size
     * }
     */
    public static void total_internal_size(MemorySegment struct, int fieldValue) {
        struct.set(total_internal_size$LAYOUT, total_internal_size$OFFSET, fieldValue);
    }

    private static final OfLong total_dma_allocated_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("total_dma_allocated_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t total_dma_allocated_size
     * }
     */
    public static final OfLong total_dma_allocated_size$layout() {
        return total_dma_allocated_size$LAYOUT;
    }

    private static final long total_dma_allocated_size$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t total_dma_allocated_size
     * }
     */
    public static final long total_dma_allocated_size$offset() {
        return total_dma_allocated_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t total_dma_allocated_size
     * }
     */
    public static long total_dma_allocated_size(MemorySegment struct) {
        return struct.get(total_dma_allocated_size$LAYOUT, total_dma_allocated_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t total_dma_allocated_size
     * }
     */
    public static void total_dma_allocated_size(MemorySegment struct, long fieldValue) {
        struct.set(total_dma_allocated_size$LAYOUT, total_dma_allocated_size$OFFSET, fieldValue);
    }

    private static final OfInt total_sram_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("total_sram_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t total_sram_size
     * }
     */
    public static final OfInt total_sram_size$layout() {
        return total_sram_size$LAYOUT;
    }

    private static final long total_sram_size$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t total_sram_size
     * }
     */
    public static final long total_sram_size$offset() {
        return total_sram_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t total_sram_size
     * }
     */
    public static int total_sram_size(MemorySegment struct) {
        return struct.get(total_sram_size$LAYOUT, total_sram_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t total_sram_size
     * }
     */
    public static void total_sram_size(MemorySegment struct, int fieldValue) {
        struct.set(total_sram_size$LAYOUT, total_sram_size$OFFSET, fieldValue);
    }

    private static final OfInt free_sram_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("free_sram_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t free_sram_size
     * }
     */
    public static final OfInt free_sram_size$layout() {
        return free_sram_size$LAYOUT;
    }

    private static final long free_sram_size$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t free_sram_size
     * }
     */
    public static final long free_sram_size$offset() {
        return free_sram_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t free_sram_size
     * }
     */
    public static int free_sram_size(MemorySegment struct) {
        return struct.get(free_sram_size$LAYOUT, free_sram_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t free_sram_size
     * }
     */
    public static void free_sram_size(MemorySegment struct, int fieldValue) {
        struct.set(free_sram_size$LAYOUT, free_sram_size$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t reserved[10]
     * }
     */
    public static final SequenceLayout reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t reserved[10]
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t reserved[10]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct) {
        return struct.asSlice(reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t reserved[10]
     * }
     */
    public static void reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    private static long[] reserved$DIMS = { 10 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t reserved[10]
     * }
     */
    public static long[] reserved$dimensions() {
        return reserved$DIMS;
    }
    private static final VarHandle reserved$ELEM_HANDLE = reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t reserved[10]
     * }
     */
    public static int reserved(MemorySegment struct, long index0) {
        return (int)reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t reserved[10]
     * }
     */
    public static void reserved(MemorySegment struct, long index0, int fieldValue) {
        reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

