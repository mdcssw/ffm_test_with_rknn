// Generated by jextract

package org.rknn;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _rknn_run_extend {
 *     uint64_t frame_id;
 *     int32_t non_block;
 *     int32_t timeout_ms;
 *     int32_t fence_fd;
 * }
 * }
 */
public class _rknn_run_extend {

    _rknn_run_extend() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        rknn_matmul_api_h.C_LONG.withName("frame_id"),
        rknn_matmul_api_h.C_INT.withName("non_block"),
        rknn_matmul_api_h.C_INT.withName("timeout_ms"),
        rknn_matmul_api_h.C_INT.withName("fence_fd"),
        MemoryLayout.paddingLayout(4)
    ).withName("_rknn_run_extend");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong frame_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("frame_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t frame_id
     * }
     */
    public static final OfLong frame_id$layout() {
        return frame_id$LAYOUT;
    }

    private static final long frame_id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t frame_id
     * }
     */
    public static final long frame_id$offset() {
        return frame_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t frame_id
     * }
     */
    public static long frame_id(MemorySegment struct) {
        return struct.get(frame_id$LAYOUT, frame_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t frame_id
     * }
     */
    public static void frame_id(MemorySegment struct, long fieldValue) {
        struct.set(frame_id$LAYOUT, frame_id$OFFSET, fieldValue);
    }

    private static final OfInt non_block$LAYOUT = (OfInt)$LAYOUT.select(groupElement("non_block"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t non_block
     * }
     */
    public static final OfInt non_block$layout() {
        return non_block$LAYOUT;
    }

    private static final long non_block$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t non_block
     * }
     */
    public static final long non_block$offset() {
        return non_block$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t non_block
     * }
     */
    public static int non_block(MemorySegment struct) {
        return struct.get(non_block$LAYOUT, non_block$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t non_block
     * }
     */
    public static void non_block(MemorySegment struct, int fieldValue) {
        struct.set(non_block$LAYOUT, non_block$OFFSET, fieldValue);
    }

    private static final OfInt timeout_ms$LAYOUT = (OfInt)$LAYOUT.select(groupElement("timeout_ms"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t timeout_ms
     * }
     */
    public static final OfInt timeout_ms$layout() {
        return timeout_ms$LAYOUT;
    }

    private static final long timeout_ms$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t timeout_ms
     * }
     */
    public static final long timeout_ms$offset() {
        return timeout_ms$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t timeout_ms
     * }
     */
    public static int timeout_ms(MemorySegment struct) {
        return struct.get(timeout_ms$LAYOUT, timeout_ms$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t timeout_ms
     * }
     */
    public static void timeout_ms(MemorySegment struct, int fieldValue) {
        struct.set(timeout_ms$LAYOUT, timeout_ms$OFFSET, fieldValue);
    }

    private static final OfInt fence_fd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fence_fd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t fence_fd
     * }
     */
    public static final OfInt fence_fd$layout() {
        return fence_fd$LAYOUT;
    }

    private static final long fence_fd$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t fence_fd
     * }
     */
    public static final long fence_fd$offset() {
        return fence_fd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t fence_fd
     * }
     */
    public static int fence_fd(MemorySegment struct) {
        return struct.get(fence_fd$LAYOUT, fence_fd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t fence_fd
     * }
     */
    public static void fence_fd(MemorySegment struct, int fieldValue) {
        struct.set(fence_fd$LAYOUT, fence_fd$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

