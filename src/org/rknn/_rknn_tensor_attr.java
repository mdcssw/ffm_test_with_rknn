// Generated by jextract

package org.rknn;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _rknn_tensor_attr {
 *     uint32_t index;
 *     uint32_t n_dims;
 *     uint32_t dims[16];
 *     char name[256];
 *     uint32_t n_elems;
 *     uint32_t size;
 *     rknn_tensor_format fmt;
 *     rknn_tensor_type type;
 *     rknn_tensor_qnt_type qnt_type;
 *     int8_t fl;
 *     int32_t zp;
 *     float scale;
 *     uint32_t w_stride;
 *     uint32_t size_with_stride;
 *     uint8_t pass_through;
 *     uint32_t h_stride;
 * }
 * }
 */
public class _rknn_tensor_attr {

    _rknn_tensor_attr() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        rknn_matmul_api_h.C_INT.withName("index"),
        rknn_matmul_api_h.C_INT.withName("n_dims"),
        MemoryLayout.sequenceLayout(16, rknn_matmul_api_h.C_INT).withName("dims"),
        MemoryLayout.sequenceLayout(256, rknn_matmul_api_h.C_CHAR).withName("name"),
        rknn_matmul_api_h.C_INT.withName("n_elems"),
        rknn_matmul_api_h.C_INT.withName("size"),
        rknn_matmul_api_h.C_INT.withName("fmt"),
        rknn_matmul_api_h.C_INT.withName("type"),
        rknn_matmul_api_h.C_INT.withName("qnt_type"),
        rknn_matmul_api_h.C_CHAR.withName("fl"),
        MemoryLayout.paddingLayout(3),
        rknn_matmul_api_h.C_INT.withName("zp"),
        rknn_matmul_api_h.C_FLOAT.withName("scale"),
        rknn_matmul_api_h.C_INT.withName("w_stride"),
        rknn_matmul_api_h.C_INT.withName("size_with_stride"),
        rknn_matmul_api_h.C_CHAR.withName("pass_through"),
        MemoryLayout.paddingLayout(3),
        rknn_matmul_api_h.C_INT.withName("h_stride")
    ).withName("_rknn_tensor_attr");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t index
     * }
     */
    public static final OfInt index$layout() {
        return index$LAYOUT;
    }

    private static final long index$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t index
     * }
     */
    public static final long index$offset() {
        return index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t index
     * }
     */
    public static int index(MemorySegment struct) {
        return struct.get(index$LAYOUT, index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t index
     * }
     */
    public static void index(MemorySegment struct, int fieldValue) {
        struct.set(index$LAYOUT, index$OFFSET, fieldValue);
    }

    private static final OfInt n_dims$LAYOUT = (OfInt)$LAYOUT.select(groupElement("n_dims"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t n_dims
     * }
     */
    public static final OfInt n_dims$layout() {
        return n_dims$LAYOUT;
    }

    private static final long n_dims$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t n_dims
     * }
     */
    public static final long n_dims$offset() {
        return n_dims$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t n_dims
     * }
     */
    public static int n_dims(MemorySegment struct) {
        return struct.get(n_dims$LAYOUT, n_dims$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t n_dims
     * }
     */
    public static void n_dims(MemorySegment struct, int fieldValue) {
        struct.set(n_dims$LAYOUT, n_dims$OFFSET, fieldValue);
    }

    private static final SequenceLayout dims$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("dims"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t dims[16]
     * }
     */
    public static final SequenceLayout dims$layout() {
        return dims$LAYOUT;
    }

    private static final long dims$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t dims[16]
     * }
     */
    public static final long dims$offset() {
        return dims$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t dims[16]
     * }
     */
    public static MemorySegment dims(MemorySegment struct) {
        return struct.asSlice(dims$OFFSET, dims$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t dims[16]
     * }
     */
    public static void dims(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dims$OFFSET, dims$LAYOUT.byteSize());
    }

    private static long[] dims$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t dims[16]
     * }
     */
    public static long[] dims$dimensions() {
        return dims$DIMS;
    }
    private static final VarHandle dims$ELEM_HANDLE = dims$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t dims[16]
     * }
     */
    public static int dims(MemorySegment struct, long index0) {
        return (int)dims$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t dims[16]
     * }
     */
    public static void dims(MemorySegment struct, long index0, int fieldValue) {
        dims$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static final SequenceLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.asSlice(name$OFFSET, name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, name$OFFSET, name$LAYOUT.byteSize());
    }

    private static long[] name$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static long[] name$dimensions() {
        return name$DIMS;
    }
    private static final VarHandle name$ELEM_HANDLE = name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static byte name(MemorySegment struct, long index0) {
        return (byte)name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static void name(MemorySegment struct, long index0, byte fieldValue) {
        name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt n_elems$LAYOUT = (OfInt)$LAYOUT.select(groupElement("n_elems"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t n_elems
     * }
     */
    public static final OfInt n_elems$layout() {
        return n_elems$LAYOUT;
    }

    private static final long n_elems$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t n_elems
     * }
     */
    public static final long n_elems$offset() {
        return n_elems$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t n_elems
     * }
     */
    public static int n_elems(MemorySegment struct) {
        return struct.get(n_elems$LAYOUT, n_elems$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t n_elems
     * }
     */
    public static void n_elems(MemorySegment struct, int fieldValue) {
        struct.set(n_elems$LAYOUT, n_elems$OFFSET, fieldValue);
    }

    private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static final OfInt size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 332;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static int size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static void size(MemorySegment struct, int fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final OfInt fmt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fmt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rknn_tensor_format fmt
     * }
     */
    public static final OfInt fmt$layout() {
        return fmt$LAYOUT;
    }

    private static final long fmt$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rknn_tensor_format fmt
     * }
     */
    public static final long fmt$offset() {
        return fmt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rknn_tensor_format fmt
     * }
     */
    public static int fmt(MemorySegment struct) {
        return struct.get(fmt$LAYOUT, fmt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rknn_tensor_format fmt
     * }
     */
    public static void fmt(MemorySegment struct, int fieldValue) {
        struct.set(fmt$LAYOUT, fmt$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rknn_tensor_type type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 340;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rknn_tensor_type type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rknn_tensor_type type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rknn_tensor_type type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt qnt_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("qnt_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rknn_tensor_qnt_type qnt_type
     * }
     */
    public static final OfInt qnt_type$layout() {
        return qnt_type$LAYOUT;
    }

    private static final long qnt_type$OFFSET = 344;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rknn_tensor_qnt_type qnt_type
     * }
     */
    public static final long qnt_type$offset() {
        return qnt_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rknn_tensor_qnt_type qnt_type
     * }
     */
    public static int qnt_type(MemorySegment struct) {
        return struct.get(qnt_type$LAYOUT, qnt_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rknn_tensor_qnt_type qnt_type
     * }
     */
    public static void qnt_type(MemorySegment struct, int fieldValue) {
        struct.set(qnt_type$LAYOUT, qnt_type$OFFSET, fieldValue);
    }

    private static final OfByte fl$LAYOUT = (OfByte)$LAYOUT.select(groupElement("fl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t fl
     * }
     */
    public static final OfByte fl$layout() {
        return fl$LAYOUT;
    }

    private static final long fl$OFFSET = 348;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t fl
     * }
     */
    public static final long fl$offset() {
        return fl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t fl
     * }
     */
    public static byte fl(MemorySegment struct) {
        return struct.get(fl$LAYOUT, fl$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t fl
     * }
     */
    public static void fl(MemorySegment struct, byte fieldValue) {
        struct.set(fl$LAYOUT, fl$OFFSET, fieldValue);
    }

    private static final OfInt zp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("zp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t zp
     * }
     */
    public static final OfInt zp$layout() {
        return zp$LAYOUT;
    }

    private static final long zp$OFFSET = 352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t zp
     * }
     */
    public static final long zp$offset() {
        return zp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t zp
     * }
     */
    public static int zp(MemorySegment struct) {
        return struct.get(zp$LAYOUT, zp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t zp
     * }
     */
    public static void zp(MemorySegment struct, int fieldValue) {
        struct.set(zp$LAYOUT, zp$OFFSET, fieldValue);
    }

    private static final OfFloat scale$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float scale
     * }
     */
    public static final OfFloat scale$layout() {
        return scale$LAYOUT;
    }

    private static final long scale$OFFSET = 356;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float scale
     * }
     */
    public static final long scale$offset() {
        return scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float scale
     * }
     */
    public static float scale(MemorySegment struct) {
        return struct.get(scale$LAYOUT, scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float scale
     * }
     */
    public static void scale(MemorySegment struct, float fieldValue) {
        struct.set(scale$LAYOUT, scale$OFFSET, fieldValue);
    }

    private static final OfInt w_stride$LAYOUT = (OfInt)$LAYOUT.select(groupElement("w_stride"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t w_stride
     * }
     */
    public static final OfInt w_stride$layout() {
        return w_stride$LAYOUT;
    }

    private static final long w_stride$OFFSET = 360;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t w_stride
     * }
     */
    public static final long w_stride$offset() {
        return w_stride$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t w_stride
     * }
     */
    public static int w_stride(MemorySegment struct) {
        return struct.get(w_stride$LAYOUT, w_stride$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t w_stride
     * }
     */
    public static void w_stride(MemorySegment struct, int fieldValue) {
        struct.set(w_stride$LAYOUT, w_stride$OFFSET, fieldValue);
    }

    private static final OfInt size_with_stride$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size_with_stride"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t size_with_stride
     * }
     */
    public static final OfInt size_with_stride$layout() {
        return size_with_stride$LAYOUT;
    }

    private static final long size_with_stride$OFFSET = 364;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t size_with_stride
     * }
     */
    public static final long size_with_stride$offset() {
        return size_with_stride$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t size_with_stride
     * }
     */
    public static int size_with_stride(MemorySegment struct) {
        return struct.get(size_with_stride$LAYOUT, size_with_stride$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t size_with_stride
     * }
     */
    public static void size_with_stride(MemorySegment struct, int fieldValue) {
        struct.set(size_with_stride$LAYOUT, size_with_stride$OFFSET, fieldValue);
    }

    private static final OfByte pass_through$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pass_through"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t pass_through
     * }
     */
    public static final OfByte pass_through$layout() {
        return pass_through$LAYOUT;
    }

    private static final long pass_through$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t pass_through
     * }
     */
    public static final long pass_through$offset() {
        return pass_through$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t pass_through
     * }
     */
    public static byte pass_through(MemorySegment struct) {
        return struct.get(pass_through$LAYOUT, pass_through$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t pass_through
     * }
     */
    public static void pass_through(MemorySegment struct, byte fieldValue) {
        struct.set(pass_through$LAYOUT, pass_through$OFFSET, fieldValue);
    }

    private static final OfInt h_stride$LAYOUT = (OfInt)$LAYOUT.select(groupElement("h_stride"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t h_stride
     * }
     */
    public static final OfInt h_stride$layout() {
        return h_stride$LAYOUT;
    }

    private static final long h_stride$OFFSET = 372;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t h_stride
     * }
     */
    public static final long h_stride$offset() {
        return h_stride$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t h_stride
     * }
     */
    public static int h_stride(MemorySegment struct) {
        return struct.get(h_stride$LAYOUT, h_stride$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t h_stride
     * }
     */
    public static void h_stride(MemorySegment struct, int fieldValue) {
        struct.set(h_stride$LAYOUT, h_stride$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

