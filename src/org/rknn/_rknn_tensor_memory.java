// Generated by jextract

package org.rknn;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _rknn_tensor_memory {
 *     void *virt_addr;
 *     uint64_t phys_addr;
 *     int32_t fd;
 *     int32_t offset;
 *     uint32_t size;
 *     uint32_t flags;
 *     void *priv_data;
 * }
 * }
 */
public class _rknn_tensor_memory {

    _rknn_tensor_memory() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        rknn_matmul_api_h.C_POINTER.withName("virt_addr"),
        rknn_matmul_api_h.C_LONG.withName("phys_addr"),
        rknn_matmul_api_h.C_INT.withName("fd"),
        rknn_matmul_api_h.C_INT.withName("offset"),
        rknn_matmul_api_h.C_INT.withName("size"),
        rknn_matmul_api_h.C_INT.withName("flags"),
        rknn_matmul_api_h.C_POINTER.withName("priv_data")
    ).withName("_rknn_tensor_memory");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout virt_addr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("virt_addr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *virt_addr
     * }
     */
    public static final AddressLayout virt_addr$layout() {
        return virt_addr$LAYOUT;
    }

    private static final long virt_addr$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *virt_addr
     * }
     */
    public static final long virt_addr$offset() {
        return virt_addr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *virt_addr
     * }
     */
    public static MemorySegment virt_addr(MemorySegment struct) {
        return struct.get(virt_addr$LAYOUT, virt_addr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *virt_addr
     * }
     */
    public static void virt_addr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(virt_addr$LAYOUT, virt_addr$OFFSET, fieldValue);
    }

    private static final OfLong phys_addr$LAYOUT = (OfLong)$LAYOUT.select(groupElement("phys_addr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t phys_addr
     * }
     */
    public static final OfLong phys_addr$layout() {
        return phys_addr$LAYOUT;
    }

    private static final long phys_addr$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t phys_addr
     * }
     */
    public static final long phys_addr$offset() {
        return phys_addr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t phys_addr
     * }
     */
    public static long phys_addr(MemorySegment struct) {
        return struct.get(phys_addr$LAYOUT, phys_addr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t phys_addr
     * }
     */
    public static void phys_addr(MemorySegment struct, long fieldValue) {
        struct.set(phys_addr$LAYOUT, phys_addr$OFFSET, fieldValue);
    }

    private static final OfInt fd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t fd
     * }
     */
    public static final OfInt fd$layout() {
        return fd$LAYOUT;
    }

    private static final long fd$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t fd
     * }
     */
    public static final long fd$offset() {
        return fd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t fd
     * }
     */
    public static int fd(MemorySegment struct) {
        return struct.get(fd$LAYOUT, fd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t fd
     * }
     */
    public static void fd(MemorySegment struct, int fieldValue) {
        struct.set(fd$LAYOUT, fd$OFFSET, fieldValue);
    }

    private static final OfInt offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t offset
     * }
     */
    public static final OfInt offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t offset
     * }
     */
    public static int offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t offset
     * }
     */
    public static void offset(MemorySegment struct, int fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static final OfInt size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static int size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static void size(MemorySegment struct, int fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final AddressLayout priv_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("priv_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *priv_data
     * }
     */
    public static final AddressLayout priv_data$layout() {
        return priv_data$LAYOUT;
    }

    private static final long priv_data$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *priv_data
     * }
     */
    public static final long priv_data$offset() {
        return priv_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *priv_data
     * }
     */
    public static MemorySegment priv_data(MemorySegment struct) {
        return struct.get(priv_data$LAYOUT, priv_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *priv_data
     * }
     */
    public static void priv_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(priv_data$LAYOUT, priv_data$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

