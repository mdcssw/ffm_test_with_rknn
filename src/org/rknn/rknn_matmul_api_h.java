// Generated by jextract

package org.rknn;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class rknn_matmul_api_h {

    rknn_matmul_api_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("rknnrt"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int _STDINT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return _STDINT_H;
    }
    private static final int _FEATURES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return _FEATURES_H;
    }
    private static final int _DEFAULT_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return _DEFAULT_SOURCE;
    }
    private static final int __GLIBC_USE_ISOC2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return __GLIBC_USE_ISOC2X;
    }
    private static final int __USE_ISOC11 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return __USE_ISOC11;
    }
    private static final int __USE_ISOC99 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return __USE_ISOC99;
    }
    private static final int __USE_ISOC95 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return __USE_ISOC95;
    }
    private static final int __USE_POSIX_IMPLICITLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return __USE_POSIX_IMPLICITLY;
    }
    private static final int _POSIX_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return _POSIX_SOURCE;
    }
    private static final int __USE_POSIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return __USE_POSIX;
    }
    private static final int __USE_POSIX2 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return __USE_POSIX2;
    }
    private static final int __USE_POSIX199309 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return __USE_POSIX199309;
    }
    private static final int __USE_POSIX199506 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return __USE_POSIX199506;
    }
    private static final int __USE_XOPEN2K = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return __USE_XOPEN2K;
    }
    private static final int __USE_XOPEN2K8 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return __USE_XOPEN2K8;
    }
    private static final int _ATFILE_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return _ATFILE_SOURCE;
    }
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __WORDSIZE_TIME64_COMPAT32 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return __WORDSIZE_TIME64_COMPAT32;
    }
    private static final int __SYSCALL_WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return __SYSCALL_WORDSIZE;
    }
    private static final int __USE_MISC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return __USE_MISC;
    }
    private static final int __USE_ATFILE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return __USE_ATFILE;
    }
    private static final int __USE_FORTIFY_LEVEL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return __USE_FORTIFY_LEVEL;
    }
    private static final int __GLIBC_USE_DEPRECATED_GETS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return __GLIBC_USE_DEPRECATED_GETS;
    }
    private static final int __GLIBC_USE_DEPRECATED_SCANF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return __GLIBC_USE_DEPRECATED_SCANF;
    }
    private static final int _STDC_PREDEF_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return _STDC_PREDEF_H;
    }
    private static final int __STDC_IEC_559__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return __STDC_IEC_559__;
    }
    private static final int __STDC_IEC_559_COMPLEX__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return __STDC_IEC_559_COMPLEX__;
    }
    private static final int __GNU_LIBRARY__ = (int)6L;
    /**
     * {@snippet lang=c :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return __GNU_LIBRARY__;
    }
    private static final int __GLIBC__ = (int)2L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return __GLIBC__;
    }
    private static final int __GLIBC_MINOR__ = (int)36L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_MINOR__ 36
     * }
     */
    public static int __GLIBC_MINOR__() {
        return __GLIBC_MINOR__;
    }
    private static final int _SYS_CDEFS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return _SYS_CDEFS_H;
    }
    private static final int __glibc_c99_flexarr_available = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return __glibc_c99_flexarr_available;
    }
    private static final int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI;
    }
    private static final int __HAVE_GENERIC_SELECTION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return __HAVE_GENERIC_SELECTION;
    }
    private static final int __GLIBC_USE_LIB_EXT2 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return __GLIBC_USE_LIB_EXT2;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return __GLIBC_USE_IEC_60559_BFP_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_BFP_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return __GLIBC_USE_IEC_60559_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_TYPES_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return __GLIBC_USE_IEC_60559_TYPES_EXT;
    }
    private static final int _BITS_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return _BITS_TYPES_H;
    }
    private static final int _BITS_TYPESIZES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return _BITS_TYPESIZES_H;
    }
    private static final int __OFF_T_MATCHES_OFF64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return __OFF_T_MATCHES_OFF64_T;
    }
    private static final int __INO_T_MATCHES_INO64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return __INO_T_MATCHES_INO64_T;
    }
    private static final int __RLIM_T_MATCHES_RLIM64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return __RLIM_T_MATCHES_RLIM64_T;
    }
    private static final int __STATFS_MATCHES_STATFS64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return __STATFS_MATCHES_STATFS64;
    }
    private static final int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64;
    }
    private static final int __FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return __FD_SETSIZE;
    }
    private static final int _BITS_TIME64_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return _BITS_TIME64_H;
    }
    private static final int _BITS_WCHAR_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return _BITS_WCHAR_H;
    }
    private static final int _BITS_STDINT_INTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return _BITS_STDINT_INTN_H;
    }
    private static final int _BITS_STDINT_UINTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return _BITS_STDINT_UINTN_H;
    }
    private static final int RKNN_FLAG_PRIOR_HIGH = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RKNN_FLAG_PRIOR_HIGH 0
     * }
     */
    public static int RKNN_FLAG_PRIOR_HIGH() {
        return RKNN_FLAG_PRIOR_HIGH;
    }
    private static final int RKNN_FLAG_PRIOR_MEDIUM = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RKNN_FLAG_PRIOR_MEDIUM 1
     * }
     */
    public static int RKNN_FLAG_PRIOR_MEDIUM() {
        return RKNN_FLAG_PRIOR_MEDIUM;
    }
    private static final int RKNN_FLAG_PRIOR_LOW = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RKNN_FLAG_PRIOR_LOW 2
     * }
     */
    public static int RKNN_FLAG_PRIOR_LOW() {
        return RKNN_FLAG_PRIOR_LOW;
    }
    private static final int RKNN_FLAG_ASYNC_MASK = (int)4L;
    /**
     * {@snippet lang=c :
     * #define RKNN_FLAG_ASYNC_MASK 4
     * }
     */
    public static int RKNN_FLAG_ASYNC_MASK() {
        return RKNN_FLAG_ASYNC_MASK;
    }
    private static final int RKNN_FLAG_COLLECT_PERF_MASK = (int)8L;
    /**
     * {@snippet lang=c :
     * #define RKNN_FLAG_COLLECT_PERF_MASK 8
     * }
     */
    public static int RKNN_FLAG_COLLECT_PERF_MASK() {
        return RKNN_FLAG_COLLECT_PERF_MASK;
    }
    private static final int RKNN_FLAG_MEM_ALLOC_OUTSIDE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define RKNN_FLAG_MEM_ALLOC_OUTSIDE 16
     * }
     */
    public static int RKNN_FLAG_MEM_ALLOC_OUTSIDE() {
        return RKNN_FLAG_MEM_ALLOC_OUTSIDE;
    }
    private static final int RKNN_FLAG_SHARE_WEIGHT_MEM = (int)32L;
    /**
     * {@snippet lang=c :
     * #define RKNN_FLAG_SHARE_WEIGHT_MEM 32
     * }
     */
    public static int RKNN_FLAG_SHARE_WEIGHT_MEM() {
        return RKNN_FLAG_SHARE_WEIGHT_MEM;
    }
    private static final int RKNN_FLAG_FENCE_IN_OUTSIDE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define RKNN_FLAG_FENCE_IN_OUTSIDE 64
     * }
     */
    public static int RKNN_FLAG_FENCE_IN_OUTSIDE() {
        return RKNN_FLAG_FENCE_IN_OUTSIDE;
    }
    private static final int RKNN_FLAG_FENCE_OUT_OUTSIDE = (int)128L;
    /**
     * {@snippet lang=c :
     * #define RKNN_FLAG_FENCE_OUT_OUTSIDE 128
     * }
     */
    public static int RKNN_FLAG_FENCE_OUT_OUTSIDE() {
        return RKNN_FLAG_FENCE_OUT_OUTSIDE;
    }
    private static final int RKNN_FLAG_COLLECT_MODEL_INFO_ONLY = (int)256L;
    /**
     * {@snippet lang=c :
     * #define RKNN_FLAG_COLLECT_MODEL_INFO_ONLY 256
     * }
     */
    public static int RKNN_FLAG_COLLECT_MODEL_INFO_ONLY() {
        return RKNN_FLAG_COLLECT_MODEL_INFO_ONLY;
    }
    private static final int RKNN_FLAG_INTERNAL_ALLOC_OUTSIDE = (int)512L;
    /**
     * {@snippet lang=c :
     * #define RKNN_FLAG_INTERNAL_ALLOC_OUTSIDE 512
     * }
     */
    public static int RKNN_FLAG_INTERNAL_ALLOC_OUTSIDE() {
        return RKNN_FLAG_INTERNAL_ALLOC_OUTSIDE;
    }
    private static final int RKNN_FLAG_EXECUTE_FALLBACK_PRIOR_DEVICE_GPU = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define RKNN_FLAG_EXECUTE_FALLBACK_PRIOR_DEVICE_GPU 1024
     * }
     */
    public static int RKNN_FLAG_EXECUTE_FALLBACK_PRIOR_DEVICE_GPU() {
        return RKNN_FLAG_EXECUTE_FALLBACK_PRIOR_DEVICE_GPU;
    }
    private static final int RKNN_FLAG_ENABLE_SRAM = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define RKNN_FLAG_ENABLE_SRAM 2048
     * }
     */
    public static int RKNN_FLAG_ENABLE_SRAM() {
        return RKNN_FLAG_ENABLE_SRAM;
    }
    private static final int RKNN_FLAG_SHARE_SRAM = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define RKNN_FLAG_SHARE_SRAM 4096
     * }
     */
    public static int RKNN_FLAG_SHARE_SRAM() {
        return RKNN_FLAG_SHARE_SRAM;
    }
    private static final int RKNN_FLAG_DISABLE_PROC_HIGH_PRIORITY = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define RKNN_FLAG_DISABLE_PROC_HIGH_PRIORITY 8192
     * }
     */
    public static int RKNN_FLAG_DISABLE_PROC_HIGH_PRIORITY() {
        return RKNN_FLAG_DISABLE_PROC_HIGH_PRIORITY;
    }
    private static final int RKNN_FLAG_DISABLE_FLUSH_INPUT_MEM_CACHE = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define RKNN_FLAG_DISABLE_FLUSH_INPUT_MEM_CACHE 16384
     * }
     */
    public static int RKNN_FLAG_DISABLE_FLUSH_INPUT_MEM_CACHE() {
        return RKNN_FLAG_DISABLE_FLUSH_INPUT_MEM_CACHE;
    }
    private static final int RKNN_FLAG_DISABLE_FLUSH_OUTPUT_MEM_CACHE = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define RKNN_FLAG_DISABLE_FLUSH_OUTPUT_MEM_CACHE 32768
     * }
     */
    public static int RKNN_FLAG_DISABLE_FLUSH_OUTPUT_MEM_CACHE() {
        return RKNN_FLAG_DISABLE_FLUSH_OUTPUT_MEM_CACHE;
    }
    private static final int RKNN_SUCC = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RKNN_SUCC 0
     * }
     */
    public static int RKNN_SUCC() {
        return RKNN_SUCC;
    }
    private static final int RKNN_MAX_DIMS = (int)16L;
    /**
     * {@snippet lang=c :
     * #define RKNN_MAX_DIMS 16
     * }
     */
    public static int RKNN_MAX_DIMS() {
        return RKNN_MAX_DIMS;
    }
    private static final int RKNN_MAX_NUM_CHANNEL = (int)15L;
    /**
     * {@snippet lang=c :
     * #define RKNN_MAX_NUM_CHANNEL 15
     * }
     */
    public static int RKNN_MAX_NUM_CHANNEL() {
        return RKNN_MAX_NUM_CHANNEL;
    }
    private static final int RKNN_MAX_NAME_LEN = (int)256L;
    /**
     * {@snippet lang=c :
     * #define RKNN_MAX_NAME_LEN 256
     * }
     */
    public static int RKNN_MAX_NAME_LEN() {
        return RKNN_MAX_NAME_LEN;
    }
    private static final int RKNN_MAX_DYNAMIC_SHAPE_NUM = (int)512L;
    /**
     * {@snippet lang=c :
     * #define RKNN_MAX_DYNAMIC_SHAPE_NUM 512
     * }
     */
    public static int RKNN_MAX_DYNAMIC_SHAPE_NUM() {
        return RKNN_MAX_DYNAMIC_SHAPE_NUM;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u_char
     * }
     */
    public static final OfByte __u_char = rknn_matmul_api_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u_short
     * }
     */
    public static final OfShort __u_short = rknn_matmul_api_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u_int
     * }
     */
    public static final OfInt __u_int = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_long
     * }
     */
    public static final OfLong __u_long = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = rknn_matmul_api_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = rknn_matmul_api_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = rknn_matmul_api_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = rknn_matmul_api_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __int64_t
     * }
     */
    public static final OfLong __int64_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int8_t __int_least8_t
     * }
     */
    public static final OfByte __int_least8_t = rknn_matmul_api_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t __uint_least8_t
     * }
     */
    public static final OfByte __uint_least8_t = rknn_matmul_api_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t __int_least16_t
     * }
     */
    public static final OfShort __int_least16_t = rknn_matmul_api_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __uint_least16_t
     * }
     */
    public static final OfShort __uint_least16_t = rknn_matmul_api_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __int_least32_t
     * }
     */
    public static final OfInt __int_least32_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __uint_least32_t
     * }
     */
    public static final OfInt __uint_least32_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __int_least64_t
     * }
     */
    public static final OfLong __int_least64_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __uint_least64_t
     * }
     */
    public static final OfLong __uint_least64_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __quad_t
     * }
     */
    public static final OfLong __quad_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_quad_t
     * }
     */
    public static final OfLong __u_quad_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __intmax_t
     * }
     */
    public static final OfLong __intmax_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uintmax_t
     * }
     */
    public static final OfLong __uintmax_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __dev_t
     * }
     */
    public static final OfLong __dev_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uid_t
     * }
     */
    public static final OfInt __uid_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __gid_t
     * }
     */
    public static final OfInt __gid_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino_t
     * }
     */
    public static final OfLong __ino_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino64_t
     * }
     */
    public static final OfLong __ino64_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __mode_t
     * }
     */
    public static final OfInt __mode_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __nlink_t
     * }
     */
    public static final OfLong __nlink_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off_t
     * }
     */
    public static final OfLong __off_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off64_t
     * }
     */
    public static final OfLong __off64_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __pid_t
     * }
     */
    public static final OfInt __pid_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __clock_t
     * }
     */
    public static final OfLong __clock_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim_t
     * }
     */
    public static final OfLong __rlim_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim64_t
     * }
     */
    public static final OfLong __rlim64_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __id_t
     * }
     */
    public static final OfInt __id_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __time_t
     * }
     */
    public static final OfLong __time_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __useconds_t
     * }
     */
    public static final OfInt __useconds_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds_t
     * }
     */
    public static final OfLong __suseconds_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds64_t
     * }
     */
    public static final OfLong __suseconds64_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __daddr_t
     * }
     */
    public static final OfInt __daddr_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __key_t
     * }
     */
    public static final OfInt __key_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __clockid_t
     * }
     */
    public static final OfInt __clockid_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef void *__timer_t
     * }
     */
    public static final AddressLayout __timer_t = rknn_matmul_api_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __blksize_t
     * }
     */
    public static final OfLong __blksize_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt_t
     * }
     */
    public static final OfLong __blkcnt_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt64_t
     * }
     */
    public static final OfLong __blkcnt64_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt_t
     * }
     */
    public static final OfLong __fsblkcnt_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt64_t
     * }
     */
    public static final OfLong __fsblkcnt64_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt_t
     * }
     */
    public static final OfLong __fsfilcnt_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt64_t
     * }
     */
    public static final OfLong __fsfilcnt64_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fsword_t
     * }
     */
    public static final OfLong __fsword_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __ssize_t
     * }
     */
    public static final OfLong __ssize_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __syscall_slong_t
     * }
     */
    public static final OfLong __syscall_slong_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __syscall_ulong_t
     * }
     */
    public static final OfLong __syscall_ulong_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __off64_t __loff_t
     * }
     */
    public static final OfLong __loff_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *__caddr_t
     * }
     */
    public static final AddressLayout __caddr_t = rknn_matmul_api_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __intptr_t
     * }
     */
    public static final OfLong __intptr_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __socklen_t
     * }
     */
    public static final OfInt __socklen_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __sig_atomic_t
     * }
     */
    public static final OfInt __sig_atomic_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int8_t int8_t
     * }
     */
    public static final OfByte int8_t = rknn_matmul_api_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t int16_t
     * }
     */
    public static final OfShort int16_t = rknn_matmul_api_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t int32_t
     * }
     */
    public static final OfInt int32_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t int64_t
     * }
     */
    public static final OfLong int64_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t uint8_t
     * }
     */
    public static final OfByte uint8_t = rknn_matmul_api_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t uint16_t
     * }
     */
    public static final OfShort uint16_t = rknn_matmul_api_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t uint32_t
     * }
     */
    public static final OfInt uint32_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t uint64_t
     * }
     */
    public static final OfLong uint64_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int_least8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = rknn_matmul_api_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int_least16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = rknn_matmul_api_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int_least32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int_least64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint_least8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = rknn_matmul_api_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint_least16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = rknn_matmul_api_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = rknn_matmul_api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = rknn_matmul_api_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef long int_fast16_t
     * }
     */
    public static final OfLong int_fast16_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast32_t
     * }
     */
    public static final OfLong int_fast32_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = rknn_matmul_api_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast16_t
     * }
     */
    public static final OfLong uint_fast16_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast32_t
     * }
     */
    public static final OfLong uint_fast32_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intptr_t
     * }
     */
    public static final OfLong intptr_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __intmax_t intmax_t
     * }
     */
    public static final OfLong intmax_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uintmax_t uintmax_t
     * }
     */
    public static final OfLong uintmax_t = rknn_matmul_api_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint64_t rknn_context
     * }
     */
    public static final OfLong rknn_context = rknn_matmul_api_h.C_LONG;
    private static final int RKNN_QUERY_IN_OUT_NUM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_IN_OUT_NUM = 0
     * }
     */
    public static int RKNN_QUERY_IN_OUT_NUM() {
        return RKNN_QUERY_IN_OUT_NUM;
    }
    private static final int RKNN_QUERY_INPUT_ATTR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_INPUT_ATTR = 1
     * }
     */
    public static int RKNN_QUERY_INPUT_ATTR() {
        return RKNN_QUERY_INPUT_ATTR;
    }
    private static final int RKNN_QUERY_OUTPUT_ATTR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_OUTPUT_ATTR = 2
     * }
     */
    public static int RKNN_QUERY_OUTPUT_ATTR() {
        return RKNN_QUERY_OUTPUT_ATTR;
    }
    private static final int RKNN_QUERY_PERF_DETAIL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_PERF_DETAIL = 3
     * }
     */
    public static int RKNN_QUERY_PERF_DETAIL() {
        return RKNN_QUERY_PERF_DETAIL;
    }
    private static final int RKNN_QUERY_PERF_RUN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_PERF_RUN = 4
     * }
     */
    public static int RKNN_QUERY_PERF_RUN() {
        return RKNN_QUERY_PERF_RUN;
    }
    private static final int RKNN_QUERY_SDK_VERSION = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_SDK_VERSION = 5
     * }
     */
    public static int RKNN_QUERY_SDK_VERSION() {
        return RKNN_QUERY_SDK_VERSION;
    }
    private static final int RKNN_QUERY_MEM_SIZE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_MEM_SIZE = 6
     * }
     */
    public static int RKNN_QUERY_MEM_SIZE() {
        return RKNN_QUERY_MEM_SIZE;
    }
    private static final int RKNN_QUERY_CUSTOM_STRING = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_CUSTOM_STRING = 7
     * }
     */
    public static int RKNN_QUERY_CUSTOM_STRING() {
        return RKNN_QUERY_CUSTOM_STRING;
    }
    private static final int RKNN_QUERY_NATIVE_INPUT_ATTR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_NATIVE_INPUT_ATTR = 8
     * }
     */
    public static int RKNN_QUERY_NATIVE_INPUT_ATTR() {
        return RKNN_QUERY_NATIVE_INPUT_ATTR;
    }
    private static final int RKNN_QUERY_NATIVE_OUTPUT_ATTR = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_NATIVE_OUTPUT_ATTR = 9
     * }
     */
    public static int RKNN_QUERY_NATIVE_OUTPUT_ATTR() {
        return RKNN_QUERY_NATIVE_OUTPUT_ATTR;
    }
    private static final int RKNN_QUERY_NATIVE_NC1HWC2_INPUT_ATTR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_NATIVE_NC1HWC2_INPUT_ATTR = 8
     * }
     */
    public static int RKNN_QUERY_NATIVE_NC1HWC2_INPUT_ATTR() {
        return RKNN_QUERY_NATIVE_NC1HWC2_INPUT_ATTR;
    }
    private static final int RKNN_QUERY_NATIVE_NC1HWC2_OUTPUT_ATTR = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_NATIVE_NC1HWC2_OUTPUT_ATTR = 9
     * }
     */
    public static int RKNN_QUERY_NATIVE_NC1HWC2_OUTPUT_ATTR() {
        return RKNN_QUERY_NATIVE_NC1HWC2_OUTPUT_ATTR;
    }
    private static final int RKNN_QUERY_NATIVE_NHWC_INPUT_ATTR = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_NATIVE_NHWC_INPUT_ATTR = 10
     * }
     */
    public static int RKNN_QUERY_NATIVE_NHWC_INPUT_ATTR() {
        return RKNN_QUERY_NATIVE_NHWC_INPUT_ATTR;
    }
    private static final int RKNN_QUERY_NATIVE_NHWC_OUTPUT_ATTR = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_NATIVE_NHWC_OUTPUT_ATTR = 11
     * }
     */
    public static int RKNN_QUERY_NATIVE_NHWC_OUTPUT_ATTR() {
        return RKNN_QUERY_NATIVE_NHWC_OUTPUT_ATTR;
    }
    private static final int RKNN_QUERY_DEVICE_MEM_INFO = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_DEVICE_MEM_INFO = 12
     * }
     */
    public static int RKNN_QUERY_DEVICE_MEM_INFO() {
        return RKNN_QUERY_DEVICE_MEM_INFO;
    }
    private static final int RKNN_QUERY_INPUT_DYNAMIC_RANGE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_INPUT_DYNAMIC_RANGE = 13
     * }
     */
    public static int RKNN_QUERY_INPUT_DYNAMIC_RANGE() {
        return RKNN_QUERY_INPUT_DYNAMIC_RANGE;
    }
    private static final int RKNN_QUERY_CURRENT_INPUT_ATTR = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_CURRENT_INPUT_ATTR = 14
     * }
     */
    public static int RKNN_QUERY_CURRENT_INPUT_ATTR() {
        return RKNN_QUERY_CURRENT_INPUT_ATTR;
    }
    private static final int RKNN_QUERY_CURRENT_OUTPUT_ATTR = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_CURRENT_OUTPUT_ATTR = 15
     * }
     */
    public static int RKNN_QUERY_CURRENT_OUTPUT_ATTR() {
        return RKNN_QUERY_CURRENT_OUTPUT_ATTR;
    }
    private static final int RKNN_QUERY_CURRENT_NATIVE_INPUT_ATTR = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_CURRENT_NATIVE_INPUT_ATTR = 16
     * }
     */
    public static int RKNN_QUERY_CURRENT_NATIVE_INPUT_ATTR() {
        return RKNN_QUERY_CURRENT_NATIVE_INPUT_ATTR;
    }
    private static final int RKNN_QUERY_CURRENT_NATIVE_OUTPUT_ATTR = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_CURRENT_NATIVE_OUTPUT_ATTR = 17
     * }
     */
    public static int RKNN_QUERY_CURRENT_NATIVE_OUTPUT_ATTR() {
        return RKNN_QUERY_CURRENT_NATIVE_OUTPUT_ATTR;
    }
    private static final int RKNN_QUERY_CMD_MAX = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _rknn_query_cmd.RKNN_QUERY_CMD_MAX = 18
     * }
     */
    public static int RKNN_QUERY_CMD_MAX() {
        return RKNN_QUERY_CMD_MAX;
    }
    private static final int RKNN_TENSOR_FLOAT32 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_type.RKNN_TENSOR_FLOAT32 = 0
     * }
     */
    public static int RKNN_TENSOR_FLOAT32() {
        return RKNN_TENSOR_FLOAT32;
    }
    private static final int RKNN_TENSOR_FLOAT16 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_type.RKNN_TENSOR_FLOAT16 = 1
     * }
     */
    public static int RKNN_TENSOR_FLOAT16() {
        return RKNN_TENSOR_FLOAT16;
    }
    private static final int RKNN_TENSOR_INT8 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_type.RKNN_TENSOR_INT8 = 2
     * }
     */
    public static int RKNN_TENSOR_INT8() {
        return RKNN_TENSOR_INT8;
    }
    private static final int RKNN_TENSOR_UINT8 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_type.RKNN_TENSOR_UINT8 = 3
     * }
     */
    public static int RKNN_TENSOR_UINT8() {
        return RKNN_TENSOR_UINT8;
    }
    private static final int RKNN_TENSOR_INT16 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_type.RKNN_TENSOR_INT16 = 4
     * }
     */
    public static int RKNN_TENSOR_INT16() {
        return RKNN_TENSOR_INT16;
    }
    private static final int RKNN_TENSOR_UINT16 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_type.RKNN_TENSOR_UINT16 = 5
     * }
     */
    public static int RKNN_TENSOR_UINT16() {
        return RKNN_TENSOR_UINT16;
    }
    private static final int RKNN_TENSOR_INT32 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_type.RKNN_TENSOR_INT32 = 6
     * }
     */
    public static int RKNN_TENSOR_INT32() {
        return RKNN_TENSOR_INT32;
    }
    private static final int RKNN_TENSOR_UINT32 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_type.RKNN_TENSOR_UINT32 = 7
     * }
     */
    public static int RKNN_TENSOR_UINT32() {
        return RKNN_TENSOR_UINT32;
    }
    private static final int RKNN_TENSOR_INT64 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_type.RKNN_TENSOR_INT64 = 8
     * }
     */
    public static int RKNN_TENSOR_INT64() {
        return RKNN_TENSOR_INT64;
    }
    private static final int RKNN_TENSOR_BOOL = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_type.RKNN_TENSOR_BOOL = 9
     * }
     */
    public static int RKNN_TENSOR_BOOL() {
        return RKNN_TENSOR_BOOL;
    }
    private static final int RKNN_TENSOR_INT4 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_type.RKNN_TENSOR_INT4 = 10
     * }
     */
    public static int RKNN_TENSOR_INT4() {
        return RKNN_TENSOR_INT4;
    }
    private static final int RKNN_TENSOR_TYPE_MAX = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_type.RKNN_TENSOR_TYPE_MAX = 11
     * }
     */
    public static int RKNN_TENSOR_TYPE_MAX() {
        return RKNN_TENSOR_TYPE_MAX;
    }
    private static final int RKNN_TENSOR_QNT_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_qnt_type.RKNN_TENSOR_QNT_NONE = 0
     * }
     */
    public static int RKNN_TENSOR_QNT_NONE() {
        return RKNN_TENSOR_QNT_NONE;
    }
    private static final int RKNN_TENSOR_QNT_DFP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_qnt_type.RKNN_TENSOR_QNT_DFP = 1
     * }
     */
    public static int RKNN_TENSOR_QNT_DFP() {
        return RKNN_TENSOR_QNT_DFP;
    }
    private static final int RKNN_TENSOR_QNT_AFFINE_ASYMMETRIC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_qnt_type.RKNN_TENSOR_QNT_AFFINE_ASYMMETRIC = 2
     * }
     */
    public static int RKNN_TENSOR_QNT_AFFINE_ASYMMETRIC() {
        return RKNN_TENSOR_QNT_AFFINE_ASYMMETRIC;
    }
    private static final int RKNN_TENSOR_QNT_MAX = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_qnt_type.RKNN_TENSOR_QNT_MAX = 3
     * }
     */
    public static int RKNN_TENSOR_QNT_MAX() {
        return RKNN_TENSOR_QNT_MAX;
    }
    private static final int RKNN_TENSOR_NCHW = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_format.RKNN_TENSOR_NCHW = 0
     * }
     */
    public static int RKNN_TENSOR_NCHW() {
        return RKNN_TENSOR_NCHW;
    }
    private static final int RKNN_TENSOR_NHWC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_format.RKNN_TENSOR_NHWC = 1
     * }
     */
    public static int RKNN_TENSOR_NHWC() {
        return RKNN_TENSOR_NHWC;
    }
    private static final int RKNN_TENSOR_NC1HWC2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_format.RKNN_TENSOR_NC1HWC2 = 2
     * }
     */
    public static int RKNN_TENSOR_NC1HWC2() {
        return RKNN_TENSOR_NC1HWC2;
    }
    private static final int RKNN_TENSOR_UNDEFINED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_format.RKNN_TENSOR_UNDEFINED = 3
     * }
     */
    public static int RKNN_TENSOR_UNDEFINED() {
        return RKNN_TENSOR_UNDEFINED;
    }
    private static final int RKNN_TENSOR_FORMAT_MAX = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_format.RKNN_TENSOR_FORMAT_MAX = 4
     * }
     */
    public static int RKNN_TENSOR_FORMAT_MAX() {
        return RKNN_TENSOR_FORMAT_MAX;
    }
    private static final int RKNN_NPU_CORE_AUTO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _rknn_core_mask.RKNN_NPU_CORE_AUTO = 0
     * }
     */
    public static int RKNN_NPU_CORE_AUTO() {
        return RKNN_NPU_CORE_AUTO;
    }
    private static final int RKNN_NPU_CORE_0 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _rknn_core_mask.RKNN_NPU_CORE_0 = 1
     * }
     */
    public static int RKNN_NPU_CORE_0() {
        return RKNN_NPU_CORE_0;
    }
    private static final int RKNN_NPU_CORE_1 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _rknn_core_mask.RKNN_NPU_CORE_1 = 2
     * }
     */
    public static int RKNN_NPU_CORE_1() {
        return RKNN_NPU_CORE_1;
    }
    private static final int RKNN_NPU_CORE_2 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _rknn_core_mask.RKNN_NPU_CORE_2 = 4
     * }
     */
    public static int RKNN_NPU_CORE_2() {
        return RKNN_NPU_CORE_2;
    }
    private static final int RKNN_NPU_CORE_0_1 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _rknn_core_mask.RKNN_NPU_CORE_0_1 = 3
     * }
     */
    public static int RKNN_NPU_CORE_0_1() {
        return RKNN_NPU_CORE_0_1;
    }
    private static final int RKNN_NPU_CORE_0_1_2 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _rknn_core_mask.RKNN_NPU_CORE_0_1_2 = 7
     * }
     */
    public static int RKNN_NPU_CORE_0_1_2() {
        return RKNN_NPU_CORE_0_1_2;
    }
    private static final int RKNN_NPU_CORE_ALL = (int)65535L;
    /**
     * {@snippet lang=c :
     * enum _rknn_core_mask.RKNN_NPU_CORE_ALL = 65535
     * }
     */
    public static int RKNN_NPU_CORE_ALL() {
        return RKNN_NPU_CORE_ALL;
    }
    private static final int RKNN_NPU_CORE_UNDEFINED = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum _rknn_core_mask.RKNN_NPU_CORE_UNDEFINED = 65536
     * }
     */
    public static int RKNN_NPU_CORE_UNDEFINED() {
        return RKNN_NPU_CORE_UNDEFINED;
    }
    private static final int RKNN_TENSOR_MEMORY_FLAGS_ALLOC_INSIDE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_mem_flags.RKNN_TENSOR_MEMORY_FLAGS_ALLOC_INSIDE = 1
     * }
     */
    public static int RKNN_TENSOR_MEMORY_FLAGS_ALLOC_INSIDE() {
        return RKNN_TENSOR_MEMORY_FLAGS_ALLOC_INSIDE;
    }
    private static final int RKNN_TENSOR_MEMORY_FLAGS_FROM_FD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_mem_flags.RKNN_TENSOR_MEMORY_FLAGS_FROM_FD = 2
     * }
     */
    public static int RKNN_TENSOR_MEMORY_FLAGS_FROM_FD() {
        return RKNN_TENSOR_MEMORY_FLAGS_FROM_FD;
    }
    private static final int RKNN_TENSOR_MEMORY_FLAGS_FROM_PHYS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_mem_flags.RKNN_TENSOR_MEMORY_FLAGS_FROM_PHYS = 3
     * }
     */
    public static int RKNN_TENSOR_MEMORY_FLAGS_FROM_PHYS() {
        return RKNN_TENSOR_MEMORY_FLAGS_FROM_PHYS;
    }
    private static final int RKNN_TENSOR_MEMORY_FLAGS_UNKNOWN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _rknn_tensor_mem_flags.RKNN_TENSOR_MEMORY_FLAGS_UNKNOWN = 4
     * }
     */
    public static int RKNN_TENSOR_MEMORY_FLAGS_UNKNOWN() {
        return RKNN_TENSOR_MEMORY_FLAGS_UNKNOWN;
    }
    private static final int RKNN_FLAG_MEMORY_FLAGS_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _rknn_mem_alloc_flags.RKNN_FLAG_MEMORY_FLAGS_DEFAULT = 0
     * }
     */
    public static int RKNN_FLAG_MEMORY_FLAGS_DEFAULT() {
        return RKNN_FLAG_MEMORY_FLAGS_DEFAULT;
    }
    private static final int RKNN_FLAG_MEMORY_CACHEABLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _rknn_mem_alloc_flags.RKNN_FLAG_MEMORY_CACHEABLE = 1
     * }
     */
    public static int RKNN_FLAG_MEMORY_CACHEABLE() {
        return RKNN_FLAG_MEMORY_CACHEABLE;
    }
    private static final int RKNN_FLAG_MEMORY_NON_CACHEABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _rknn_mem_alloc_flags.RKNN_FLAG_MEMORY_NON_CACHEABLE = 2
     * }
     */
    public static int RKNN_FLAG_MEMORY_NON_CACHEABLE() {
        return RKNN_FLAG_MEMORY_NON_CACHEABLE;
    }
    private static final int RKNN_MEMORY_SYNC_TO_DEVICE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _rknn_mem_sync_mode.RKNN_MEMORY_SYNC_TO_DEVICE = 1
     * }
     */
    public static int RKNN_MEMORY_SYNC_TO_DEVICE() {
        return RKNN_MEMORY_SYNC_TO_DEVICE;
    }
    private static final int RKNN_MEMORY_SYNC_FROM_DEVICE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _rknn_mem_sync_mode.RKNN_MEMORY_SYNC_FROM_DEVICE = 2
     * }
     */
    public static int RKNN_MEMORY_SYNC_FROM_DEVICE() {
        return RKNN_MEMORY_SYNC_FROM_DEVICE;
    }
    private static final int RKNN_MEMORY_SYNC_BIDIRECTIONAL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _rknn_mem_sync_mode.RKNN_MEMORY_SYNC_BIDIRECTIONAL = 3
     * }
     */
    public static int RKNN_MEMORY_SYNC_BIDIRECTIONAL() {
        return RKNN_MEMORY_SYNC_BIDIRECTIONAL;
    }

    private static class rknn_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_init(rknn_context *context, void *model, uint32_t size, uint32_t flag, rknn_init_extend *extend)
     * }
     */
    public static FunctionDescriptor rknn_init$descriptor() {
        return rknn_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_init(rknn_context *context, void *model, uint32_t size, uint32_t flag, rknn_init_extend *extend)
     * }
     */
    public static MethodHandle rknn_init$handle() {
        return rknn_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_init(rknn_context *context, void *model, uint32_t size, uint32_t flag, rknn_init_extend *extend)
     * }
     */
    public static int rknn_init(MemorySegment context, MemorySegment model, int size, int flag, MemorySegment extend) {
        var mh$ = rknn_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_init", context, model, size, flag, extend);
            }
            return (int)mh$.invokeExact(context, model, size, flag, extend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_dup_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_dup_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_dup_context(rknn_context *context_in, rknn_context *context_out)
     * }
     */
    public static FunctionDescriptor rknn_dup_context$descriptor() {
        return rknn_dup_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_dup_context(rknn_context *context_in, rknn_context *context_out)
     * }
     */
    public static MethodHandle rknn_dup_context$handle() {
        return rknn_dup_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_dup_context(rknn_context *context_in, rknn_context *context_out)
     * }
     */
    public static int rknn_dup_context(MemorySegment context_in, MemorySegment context_out) {
        var mh$ = rknn_dup_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_dup_context", context_in, context_out);
            }
            return (int)mh$.invokeExact(context_in, context_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_destroy(rknn_context context)
     * }
     */
    public static FunctionDescriptor rknn_destroy$descriptor() {
        return rknn_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_destroy(rknn_context context)
     * }
     */
    public static MethodHandle rknn_destroy$handle() {
        return rknn_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_destroy(rknn_context context)
     * }
     */
    public static int rknn_destroy(long context) {
        var mh$ = rknn_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_destroy", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_query {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_query"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_query(rknn_context context, rknn_query_cmd cmd, void *info, uint32_t size)
     * }
     */
    public static FunctionDescriptor rknn_query$descriptor() {
        return rknn_query.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_query(rknn_context context, rknn_query_cmd cmd, void *info, uint32_t size)
     * }
     */
    public static MethodHandle rknn_query$handle() {
        return rknn_query.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_query(rknn_context context, rknn_query_cmd cmd, void *info, uint32_t size)
     * }
     */
    public static int rknn_query(long context, int cmd, MemorySegment info, int size) {
        var mh$ = rknn_query.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_query", context, cmd, info, size);
            }
            return (int)mh$.invokeExact(context, cmd, info, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_inputs_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_inputs_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_inputs_set(rknn_context context, uint32_t n_inputs, rknn_input inputs[])
     * }
     */
    public static FunctionDescriptor rknn_inputs_set$descriptor() {
        return rknn_inputs_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_inputs_set(rknn_context context, uint32_t n_inputs, rknn_input inputs[])
     * }
     */
    public static MethodHandle rknn_inputs_set$handle() {
        return rknn_inputs_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_inputs_set(rknn_context context, uint32_t n_inputs, rknn_input inputs[])
     * }
     */
    public static int rknn_inputs_set(long context, int n_inputs, MemorySegment inputs) {
        var mh$ = rknn_inputs_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_inputs_set", context, n_inputs, inputs);
            }
            return (int)mh$.invokeExact(context, n_inputs, inputs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_set_batch_core_num {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_set_batch_core_num"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_set_batch_core_num(rknn_context context, int core_num)
     * }
     */
    public static FunctionDescriptor rknn_set_batch_core_num$descriptor() {
        return rknn_set_batch_core_num.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_set_batch_core_num(rknn_context context, int core_num)
     * }
     */
    public static MethodHandle rknn_set_batch_core_num$handle() {
        return rknn_set_batch_core_num.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_set_batch_core_num(rknn_context context, int core_num)
     * }
     */
    public static int rknn_set_batch_core_num(long context, int core_num) {
        var mh$ = rknn_set_batch_core_num.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_set_batch_core_num", context, core_num);
            }
            return (int)mh$.invokeExact(context, core_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_set_core_mask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_set_core_mask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_set_core_mask(rknn_context context, rknn_core_mask core_mask)
     * }
     */
    public static FunctionDescriptor rknn_set_core_mask$descriptor() {
        return rknn_set_core_mask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_set_core_mask(rknn_context context, rknn_core_mask core_mask)
     * }
     */
    public static MethodHandle rknn_set_core_mask$handle() {
        return rknn_set_core_mask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_set_core_mask(rknn_context context, rknn_core_mask core_mask)
     * }
     */
    public static int rknn_set_core_mask(long context, int core_mask) {
        var mh$ = rknn_set_core_mask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_set_core_mask", context, core_mask);
            }
            return (int)mh$.invokeExact(context, core_mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_run {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_run"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_run(rknn_context context, rknn_run_extend *extend)
     * }
     */
    public static FunctionDescriptor rknn_run$descriptor() {
        return rknn_run.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_run(rknn_context context, rknn_run_extend *extend)
     * }
     */
    public static MethodHandle rknn_run$handle() {
        return rknn_run.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_run(rknn_context context, rknn_run_extend *extend)
     * }
     */
    public static int rknn_run(long context, MemorySegment extend) {
        var mh$ = rknn_run.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_run", context, extend);
            }
            return (int)mh$.invokeExact(context, extend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_wait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_wait"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_wait(rknn_context context, rknn_run_extend *extend)
     * }
     */
    public static FunctionDescriptor rknn_wait$descriptor() {
        return rknn_wait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_wait(rknn_context context, rknn_run_extend *extend)
     * }
     */
    public static MethodHandle rknn_wait$handle() {
        return rknn_wait.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_wait(rknn_context context, rknn_run_extend *extend)
     * }
     */
    public static int rknn_wait(long context, MemorySegment extend) {
        var mh$ = rknn_wait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_wait", context, extend);
            }
            return (int)mh$.invokeExact(context, extend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_outputs_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_outputs_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_outputs_get(rknn_context context, uint32_t n_outputs, rknn_output outputs[], rknn_output_extend *extend)
     * }
     */
    public static FunctionDescriptor rknn_outputs_get$descriptor() {
        return rknn_outputs_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_outputs_get(rknn_context context, uint32_t n_outputs, rknn_output outputs[], rknn_output_extend *extend)
     * }
     */
    public static MethodHandle rknn_outputs_get$handle() {
        return rknn_outputs_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_outputs_get(rknn_context context, uint32_t n_outputs, rknn_output outputs[], rknn_output_extend *extend)
     * }
     */
    public static int rknn_outputs_get(long context, int n_outputs, MemorySegment outputs, MemorySegment extend) {
        var mh$ = rknn_outputs_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_outputs_get", context, n_outputs, outputs, extend);
            }
            return (int)mh$.invokeExact(context, n_outputs, outputs, extend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_outputs_release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_outputs_release"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_outputs_release(rknn_context context, uint32_t n_ouputs, rknn_output outputs[])
     * }
     */
    public static FunctionDescriptor rknn_outputs_release$descriptor() {
        return rknn_outputs_release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_outputs_release(rknn_context context, uint32_t n_ouputs, rknn_output outputs[])
     * }
     */
    public static MethodHandle rknn_outputs_release$handle() {
        return rknn_outputs_release.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_outputs_release(rknn_context context, uint32_t n_ouputs, rknn_output outputs[])
     * }
     */
    public static int rknn_outputs_release(long context, int n_ouputs, MemorySegment outputs) {
        var mh$ = rknn_outputs_release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_outputs_release", context, n_ouputs, outputs);
            }
            return (int)mh$.invokeExact(context, n_ouputs, outputs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_create_mem_from_phys {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_create_mem_from_phys"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rknn_tensor_mem *rknn_create_mem_from_phys(rknn_context ctx, uint64_t phys_addr, void *virt_addr, uint32_t size)
     * }
     */
    public static FunctionDescriptor rknn_create_mem_from_phys$descriptor() {
        return rknn_create_mem_from_phys.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rknn_tensor_mem *rknn_create_mem_from_phys(rknn_context ctx, uint64_t phys_addr, void *virt_addr, uint32_t size)
     * }
     */
    public static MethodHandle rknn_create_mem_from_phys$handle() {
        return rknn_create_mem_from_phys.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rknn_tensor_mem *rknn_create_mem_from_phys(rknn_context ctx, uint64_t phys_addr, void *virt_addr, uint32_t size)
     * }
     */
    public static MemorySegment rknn_create_mem_from_phys(long ctx, long phys_addr, MemorySegment virt_addr, int size) {
        var mh$ = rknn_create_mem_from_phys.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_create_mem_from_phys", ctx, phys_addr, virt_addr, size);
            }
            return (MemorySegment)mh$.invokeExact(ctx, phys_addr, virt_addr, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_create_mem_from_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_create_mem_from_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rknn_tensor_mem *rknn_create_mem_from_fd(rknn_context ctx, int32_t fd, void *virt_addr, uint32_t size, int32_t offset)
     * }
     */
    public static FunctionDescriptor rknn_create_mem_from_fd$descriptor() {
        return rknn_create_mem_from_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rknn_tensor_mem *rknn_create_mem_from_fd(rknn_context ctx, int32_t fd, void *virt_addr, uint32_t size, int32_t offset)
     * }
     */
    public static MethodHandle rknn_create_mem_from_fd$handle() {
        return rknn_create_mem_from_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rknn_tensor_mem *rknn_create_mem_from_fd(rknn_context ctx, int32_t fd, void *virt_addr, uint32_t size, int32_t offset)
     * }
     */
    public static MemorySegment rknn_create_mem_from_fd(long ctx, int fd, MemorySegment virt_addr, int size, int offset) {
        var mh$ = rknn_create_mem_from_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_create_mem_from_fd", ctx, fd, virt_addr, size, offset);
            }
            return (MemorySegment)mh$.invokeExact(ctx, fd, virt_addr, size, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_create_mem_from_mb_blk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_create_mem_from_mb_blk"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rknn_tensor_mem *rknn_create_mem_from_mb_blk(rknn_context ctx, void *mb_blk, int32_t offset)
     * }
     */
    public static FunctionDescriptor rknn_create_mem_from_mb_blk$descriptor() {
        return rknn_create_mem_from_mb_blk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rknn_tensor_mem *rknn_create_mem_from_mb_blk(rknn_context ctx, void *mb_blk, int32_t offset)
     * }
     */
    public static MethodHandle rknn_create_mem_from_mb_blk$handle() {
        return rknn_create_mem_from_mb_blk.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rknn_tensor_mem *rknn_create_mem_from_mb_blk(rknn_context ctx, void *mb_blk, int32_t offset)
     * }
     */
    public static MemorySegment rknn_create_mem_from_mb_blk(long ctx, MemorySegment mb_blk, int offset) {
        var mh$ = rknn_create_mem_from_mb_blk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_create_mem_from_mb_blk", ctx, mb_blk, offset);
            }
            return (MemorySegment)mh$.invokeExact(ctx, mb_blk, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_create_mem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_create_mem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rknn_tensor_mem *rknn_create_mem(rknn_context ctx, uint32_t size)
     * }
     */
    public static FunctionDescriptor rknn_create_mem$descriptor() {
        return rknn_create_mem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rknn_tensor_mem *rknn_create_mem(rknn_context ctx, uint32_t size)
     * }
     */
    public static MethodHandle rknn_create_mem$handle() {
        return rknn_create_mem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rknn_tensor_mem *rknn_create_mem(rknn_context ctx, uint32_t size)
     * }
     */
    public static MemorySegment rknn_create_mem(long ctx, int size) {
        var mh$ = rknn_create_mem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_create_mem", ctx, size);
            }
            return (MemorySegment)mh$.invokeExact(ctx, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_create_mem2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_create_mem2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * rknn_tensor_mem *rknn_create_mem2(rknn_context ctx, uint64_t size, uint64_t alloc_flags)
     * }
     */
    public static FunctionDescriptor rknn_create_mem2$descriptor() {
        return rknn_create_mem2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * rknn_tensor_mem *rknn_create_mem2(rknn_context ctx, uint64_t size, uint64_t alloc_flags)
     * }
     */
    public static MethodHandle rknn_create_mem2$handle() {
        return rknn_create_mem2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * rknn_tensor_mem *rknn_create_mem2(rknn_context ctx, uint64_t size, uint64_t alloc_flags)
     * }
     */
    public static MemorySegment rknn_create_mem2(long ctx, long size, long alloc_flags) {
        var mh$ = rknn_create_mem2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_create_mem2", ctx, size, alloc_flags);
            }
            return (MemorySegment)mh$.invokeExact(ctx, size, alloc_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_destroy_mem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_destroy_mem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_destroy_mem(rknn_context ctx, rknn_tensor_mem *mem)
     * }
     */
    public static FunctionDescriptor rknn_destroy_mem$descriptor() {
        return rknn_destroy_mem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_destroy_mem(rknn_context ctx, rknn_tensor_mem *mem)
     * }
     */
    public static MethodHandle rknn_destroy_mem$handle() {
        return rknn_destroy_mem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_destroy_mem(rknn_context ctx, rknn_tensor_mem *mem)
     * }
     */
    public static int rknn_destroy_mem(long ctx, MemorySegment mem) {
        var mh$ = rknn_destroy_mem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_destroy_mem", ctx, mem);
            }
            return (int)mh$.invokeExact(ctx, mem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_set_weight_mem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_set_weight_mem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_set_weight_mem(rknn_context ctx, rknn_tensor_mem *mem)
     * }
     */
    public static FunctionDescriptor rknn_set_weight_mem$descriptor() {
        return rknn_set_weight_mem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_set_weight_mem(rknn_context ctx, rknn_tensor_mem *mem)
     * }
     */
    public static MethodHandle rknn_set_weight_mem$handle() {
        return rknn_set_weight_mem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_set_weight_mem(rknn_context ctx, rknn_tensor_mem *mem)
     * }
     */
    public static int rknn_set_weight_mem(long ctx, MemorySegment mem) {
        var mh$ = rknn_set_weight_mem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_set_weight_mem", ctx, mem);
            }
            return (int)mh$.invokeExact(ctx, mem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_set_internal_mem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_set_internal_mem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_set_internal_mem(rknn_context ctx, rknn_tensor_mem *mem)
     * }
     */
    public static FunctionDescriptor rknn_set_internal_mem$descriptor() {
        return rknn_set_internal_mem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_set_internal_mem(rknn_context ctx, rknn_tensor_mem *mem)
     * }
     */
    public static MethodHandle rknn_set_internal_mem$handle() {
        return rknn_set_internal_mem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_set_internal_mem(rknn_context ctx, rknn_tensor_mem *mem)
     * }
     */
    public static int rknn_set_internal_mem(long ctx, MemorySegment mem) {
        var mh$ = rknn_set_internal_mem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_set_internal_mem", ctx, mem);
            }
            return (int)mh$.invokeExact(ctx, mem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_set_io_mem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_set_io_mem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_set_io_mem(rknn_context ctx, rknn_tensor_mem *mem, rknn_tensor_attr *attr)
     * }
     */
    public static FunctionDescriptor rknn_set_io_mem$descriptor() {
        return rknn_set_io_mem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_set_io_mem(rknn_context ctx, rknn_tensor_mem *mem, rknn_tensor_attr *attr)
     * }
     */
    public static MethodHandle rknn_set_io_mem$handle() {
        return rknn_set_io_mem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_set_io_mem(rknn_context ctx, rknn_tensor_mem *mem, rknn_tensor_attr *attr)
     * }
     */
    public static int rknn_set_io_mem(long ctx, MemorySegment mem, MemorySegment attr) {
        var mh$ = rknn_set_io_mem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_set_io_mem", ctx, mem, attr);
            }
            return (int)mh$.invokeExact(ctx, mem, attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_set_input_shape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_set_input_shape"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_set_input_shape(rknn_context ctx, rknn_tensor_attr *attr)
     * }
     */
    public static FunctionDescriptor rknn_set_input_shape$descriptor() {
        return rknn_set_input_shape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_set_input_shape(rknn_context ctx, rknn_tensor_attr *attr)
     * }
     */
    public static MethodHandle rknn_set_input_shape$handle() {
        return rknn_set_input_shape.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_set_input_shape(rknn_context ctx, rknn_tensor_attr *attr)
     * }
     */
    public static int rknn_set_input_shape(long ctx, MemorySegment attr) {
        var mh$ = rknn_set_input_shape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_set_input_shape", ctx, attr);
            }
            return (int)mh$.invokeExact(ctx, attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_set_input_shapes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_set_input_shapes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_set_input_shapes(rknn_context ctx, uint32_t n_inputs, rknn_tensor_attr attr[])
     * }
     */
    public static FunctionDescriptor rknn_set_input_shapes$descriptor() {
        return rknn_set_input_shapes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_set_input_shapes(rknn_context ctx, uint32_t n_inputs, rknn_tensor_attr attr[])
     * }
     */
    public static MethodHandle rknn_set_input_shapes$handle() {
        return rknn_set_input_shapes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_set_input_shapes(rknn_context ctx, uint32_t n_inputs, rknn_tensor_attr attr[])
     * }
     */
    public static int rknn_set_input_shapes(long ctx, int n_inputs, MemorySegment attr) {
        var mh$ = rknn_set_input_shapes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_set_input_shapes", ctx, n_inputs, attr);
            }
            return (int)mh$.invokeExact(ctx, n_inputs, attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_mem_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_mem_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_mem_sync(rknn_context context, rknn_tensor_mem *mem, rknn_mem_sync_mode mode)
     * }
     */
    public static FunctionDescriptor rknn_mem_sync$descriptor() {
        return rknn_mem_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_mem_sync(rknn_context context, rknn_tensor_mem *mem, rknn_mem_sync_mode mode)
     * }
     */
    public static MethodHandle rknn_mem_sync$handle() {
        return rknn_mem_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_mem_sync(rknn_context context, rknn_tensor_mem *mem, rknn_mem_sync_mode mode)
     * }
     */
    public static int rknn_mem_sync(long context, MemorySegment mem, int mode) {
        var mh$ = rknn_mem_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_mem_sync", context, mem, mode);
            }
            return (int)mh$.invokeExact(context, mem, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef rknn_context rknn_matmul_ctx
     * }
     */
    public static final OfLong rknn_matmul_ctx = rknn_matmul_api_h.C_LONG;
    private static final int RKNN_FLOAT16_MM_FLOAT16_TO_FLOAT32 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _rknn_matmul_type.RKNN_FLOAT16_MM_FLOAT16_TO_FLOAT32 = 1
     * }
     */
    public static int RKNN_FLOAT16_MM_FLOAT16_TO_FLOAT32() {
        return RKNN_FLOAT16_MM_FLOAT16_TO_FLOAT32;
    }
    private static final int RKNN_INT8_MM_INT8_TO_INT32 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _rknn_matmul_type.RKNN_INT8_MM_INT8_TO_INT32 = 2
     * }
     */
    public static int RKNN_INT8_MM_INT8_TO_INT32() {
        return RKNN_INT8_MM_INT8_TO_INT32;
    }
    private static final int RKNN_INT8_MM_INT8_TO_INT8 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _rknn_matmul_type.RKNN_INT8_MM_INT8_TO_INT8 = 3
     * }
     */
    public static int RKNN_INT8_MM_INT8_TO_INT8() {
        return RKNN_INT8_MM_INT8_TO_INT8;
    }
    private static final int RKNN_FLOAT16_MM_FLOAT16_TO_FLOAT16 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _rknn_matmul_type.RKNN_FLOAT16_MM_FLOAT16_TO_FLOAT16 = 4
     * }
     */
    public static int RKNN_FLOAT16_MM_FLOAT16_TO_FLOAT16() {
        return RKNN_FLOAT16_MM_FLOAT16_TO_FLOAT16;
    }
    private static final int RKNN_FLOAT16_MM_INT8_TO_FLOAT32 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _rknn_matmul_type.RKNN_FLOAT16_MM_INT8_TO_FLOAT32 = 5
     * }
     */
    public static int RKNN_FLOAT16_MM_INT8_TO_FLOAT32() {
        return RKNN_FLOAT16_MM_INT8_TO_FLOAT32;
    }
    private static final int RKNN_FLOAT16_MM_INT8_TO_FLOAT16 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _rknn_matmul_type.RKNN_FLOAT16_MM_INT8_TO_FLOAT16 = 6
     * }
     */
    public static int RKNN_FLOAT16_MM_INT8_TO_FLOAT16() {
        return RKNN_FLOAT16_MM_INT8_TO_FLOAT16;
    }
    private static final int RKNN_FLOAT16_MM_INT4_TO_FLOAT32 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _rknn_matmul_type.RKNN_FLOAT16_MM_INT4_TO_FLOAT32 = 7
     * }
     */
    public static int RKNN_FLOAT16_MM_INT4_TO_FLOAT32() {
        return RKNN_FLOAT16_MM_INT4_TO_FLOAT32;
    }
    private static final int RKNN_FLOAT16_MM_INT4_TO_FLOAT16 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _rknn_matmul_type.RKNN_FLOAT16_MM_INT4_TO_FLOAT16 = 8
     * }
     */
    public static int RKNN_FLOAT16_MM_INT4_TO_FLOAT16() {
        return RKNN_FLOAT16_MM_INT4_TO_FLOAT16;
    }
    private static final int RKNN_INT4_MM_INT4_TO_INT16 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _rknn_matmul_type.RKNN_INT4_MM_INT4_TO_INT16 = 10
     * }
     */
    public static int RKNN_INT4_MM_INT4_TO_INT16() {
        return RKNN_INT4_MM_INT4_TO_INT16;
    }
    private static final int RKNN_INT8_MM_INT4_TO_INT32 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _rknn_matmul_type.RKNN_INT8_MM_INT4_TO_INT32 = 11
     * }
     */
    public static int RKNN_INT8_MM_INT4_TO_INT32() {
        return RKNN_INT8_MM_INT4_TO_INT32;
    }

    private static class rknn_matmul_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_matmul_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_matmul_create(rknn_matmul_ctx *ctx, rknn_matmul_info *info, rknn_matmul_io_attr *io_attr)
     * }
     */
    public static FunctionDescriptor rknn_matmul_create$descriptor() {
        return rknn_matmul_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_matmul_create(rknn_matmul_ctx *ctx, rknn_matmul_info *info, rknn_matmul_io_attr *io_attr)
     * }
     */
    public static MethodHandle rknn_matmul_create$handle() {
        return rknn_matmul_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_matmul_create(rknn_matmul_ctx *ctx, rknn_matmul_info *info, rknn_matmul_io_attr *io_attr)
     * }
     */
    public static int rknn_matmul_create(MemorySegment ctx, MemorySegment info, MemorySegment io_attr) {
        var mh$ = rknn_matmul_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_matmul_create", ctx, info, io_attr);
            }
            return (int)mh$.invokeExact(ctx, info, io_attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_matmul_create_dyn_shape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_matmul_create_dyn_shape"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_matmul_create_dyn_shape(rknn_matmul_ctx *ctx, rknn_matmul_info *info, int shape_num, rknn_matmul_shape dynamic_shapes[], rknn_matmul_io_attr io_attrs[])
     * }
     */
    public static FunctionDescriptor rknn_matmul_create_dyn_shape$descriptor() {
        return rknn_matmul_create_dyn_shape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_matmul_create_dyn_shape(rknn_matmul_ctx *ctx, rknn_matmul_info *info, int shape_num, rknn_matmul_shape dynamic_shapes[], rknn_matmul_io_attr io_attrs[])
     * }
     */
    public static MethodHandle rknn_matmul_create_dyn_shape$handle() {
        return rknn_matmul_create_dyn_shape.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_matmul_create_dyn_shape(rknn_matmul_ctx *ctx, rknn_matmul_info *info, int shape_num, rknn_matmul_shape dynamic_shapes[], rknn_matmul_io_attr io_attrs[])
     * }
     */
    public static int rknn_matmul_create_dyn_shape(MemorySegment ctx, MemorySegment info, int shape_num, MemorySegment dynamic_shapes, MemorySegment io_attrs) {
        var mh$ = rknn_matmul_create_dyn_shape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_matmul_create_dyn_shape", ctx, info, shape_num, dynamic_shapes, io_attrs);
            }
            return (int)mh$.invokeExact(ctx, info, shape_num, dynamic_shapes, io_attrs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_matmul_set_io_mem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_matmul_set_io_mem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_matmul_set_io_mem(rknn_matmul_ctx ctx, rknn_tensor_mem *mem, rknn_matmul_tensor_attr *attr)
     * }
     */
    public static FunctionDescriptor rknn_matmul_set_io_mem$descriptor() {
        return rknn_matmul_set_io_mem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_matmul_set_io_mem(rknn_matmul_ctx ctx, rknn_tensor_mem *mem, rknn_matmul_tensor_attr *attr)
     * }
     */
    public static MethodHandle rknn_matmul_set_io_mem$handle() {
        return rknn_matmul_set_io_mem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_matmul_set_io_mem(rknn_matmul_ctx ctx, rknn_tensor_mem *mem, rknn_matmul_tensor_attr *attr)
     * }
     */
    public static int rknn_matmul_set_io_mem(long ctx, MemorySegment mem, MemorySegment attr) {
        var mh$ = rknn_matmul_set_io_mem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_matmul_set_io_mem", ctx, mem, attr);
            }
            return (int)mh$.invokeExact(ctx, mem, attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_matmul_set_core_mask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_matmul_set_core_mask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_matmul_set_core_mask(rknn_matmul_ctx context, rknn_core_mask core_mask)
     * }
     */
    public static FunctionDescriptor rknn_matmul_set_core_mask$descriptor() {
        return rknn_matmul_set_core_mask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_matmul_set_core_mask(rknn_matmul_ctx context, rknn_core_mask core_mask)
     * }
     */
    public static MethodHandle rknn_matmul_set_core_mask$handle() {
        return rknn_matmul_set_core_mask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_matmul_set_core_mask(rknn_matmul_ctx context, rknn_core_mask core_mask)
     * }
     */
    public static int rknn_matmul_set_core_mask(long context, int core_mask) {
        var mh$ = rknn_matmul_set_core_mask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_matmul_set_core_mask", context, core_mask);
            }
            return (int)mh$.invokeExact(context, core_mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_matmul_set_quant_params {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_matmul_set_quant_params"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_matmul_set_quant_params(rknn_matmul_ctx context, rknn_quant_params *params)
     * }
     */
    public static FunctionDescriptor rknn_matmul_set_quant_params$descriptor() {
        return rknn_matmul_set_quant_params.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_matmul_set_quant_params(rknn_matmul_ctx context, rknn_quant_params *params)
     * }
     */
    public static MethodHandle rknn_matmul_set_quant_params$handle() {
        return rknn_matmul_set_quant_params.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_matmul_set_quant_params(rknn_matmul_ctx context, rknn_quant_params *params)
     * }
     */
    public static int rknn_matmul_set_quant_params(long context, MemorySegment params) {
        var mh$ = rknn_matmul_set_quant_params.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_matmul_set_quant_params", context, params);
            }
            return (int)mh$.invokeExact(context, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_matmul_get_quant_params {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_matmul_get_quant_params"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_matmul_get_quant_params(rknn_matmul_ctx ctx, rknn_quant_params *params, float *scale)
     * }
     */
    public static FunctionDescriptor rknn_matmul_get_quant_params$descriptor() {
        return rknn_matmul_get_quant_params.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_matmul_get_quant_params(rknn_matmul_ctx ctx, rknn_quant_params *params, float *scale)
     * }
     */
    public static MethodHandle rknn_matmul_get_quant_params$handle() {
        return rknn_matmul_get_quant_params.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_matmul_get_quant_params(rknn_matmul_ctx ctx, rknn_quant_params *params, float *scale)
     * }
     */
    public static int rknn_matmul_get_quant_params(long ctx, MemorySegment params, MemorySegment scale) {
        var mh$ = rknn_matmul_get_quant_params.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_matmul_get_quant_params", ctx, params, scale);
            }
            return (int)mh$.invokeExact(ctx, params, scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_matmul_set_dynamic_shape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG,
            rknn_matmul_api_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_matmul_set_dynamic_shape"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_matmul_set_dynamic_shape(rknn_matmul_ctx ctx, rknn_matmul_shape *shape)
     * }
     */
    public static FunctionDescriptor rknn_matmul_set_dynamic_shape$descriptor() {
        return rknn_matmul_set_dynamic_shape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_matmul_set_dynamic_shape(rknn_matmul_ctx ctx, rknn_matmul_shape *shape)
     * }
     */
    public static MethodHandle rknn_matmul_set_dynamic_shape$handle() {
        return rknn_matmul_set_dynamic_shape.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_matmul_set_dynamic_shape(rknn_matmul_ctx ctx, rknn_matmul_shape *shape)
     * }
     */
    public static int rknn_matmul_set_dynamic_shape(long ctx, MemorySegment shape) {
        var mh$ = rknn_matmul_set_dynamic_shape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_matmul_set_dynamic_shape", ctx, shape);
            }
            return (int)mh$.invokeExact(ctx, shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_matmul_run {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_matmul_run"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_matmul_run(rknn_matmul_ctx ctx)
     * }
     */
    public static FunctionDescriptor rknn_matmul_run$descriptor() {
        return rknn_matmul_run.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_matmul_run(rknn_matmul_ctx ctx)
     * }
     */
    public static MethodHandle rknn_matmul_run$handle() {
        return rknn_matmul_run.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_matmul_run(rknn_matmul_ctx ctx)
     * }
     */
    public static int rknn_matmul_run(long ctx) {
        var mh$ = rknn_matmul_run.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_matmul_run", ctx);
            }
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_matmul_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_matmul_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_matmul_destroy(rknn_matmul_ctx ctx)
     * }
     */
    public static FunctionDescriptor rknn_matmul_destroy$descriptor() {
        return rknn_matmul_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_matmul_destroy(rknn_matmul_ctx ctx)
     * }
     */
    public static MethodHandle rknn_matmul_destroy$handle() {
        return rknn_matmul_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_matmul_destroy(rknn_matmul_ctx ctx)
     * }
     */
    public static int rknn_matmul_destroy(long ctx) {
        var mh$ = rknn_matmul_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_matmul_destroy", ctx);
            }
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rknn_B_normal_layout_to_native_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_POINTER,
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_INT,
            rknn_matmul_api_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    rknn_matmul_api_h.findOrThrow("rknn_B_normal_layout_to_native_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rknn_B_normal_layout_to_native_layout(void *B_input, void *B_output, int K, int N, int subN, int subK, rknn_matmul_type type)
     * }
     */
    public static FunctionDescriptor rknn_B_normal_layout_to_native_layout$descriptor() {
        return rknn_B_normal_layout_to_native_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rknn_B_normal_layout_to_native_layout(void *B_input, void *B_output, int K, int N, int subN, int subK, rknn_matmul_type type)
     * }
     */
    public static MethodHandle rknn_B_normal_layout_to_native_layout$handle() {
        return rknn_B_normal_layout_to_native_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int rknn_B_normal_layout_to_native_layout(void *B_input, void *B_output, int K, int N, int subN, int subK, rknn_matmul_type type)
     * }
     */
    public static int rknn_B_normal_layout_to_native_layout(MemorySegment B_input, MemorySegment B_output, int K, int N, int subN, int subK, int type) {
        var mh$ = rknn_B_normal_layout_to_native_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rknn_B_normal_layout_to_native_layout", B_input, B_output, K, N, subN, subK, type);
            }
            return (int)mh$.invokeExact(B_input, B_output, K, N, subN, subK, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final int __WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return __WCHAR_MAX;
    }
    private static final int __WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return __WCHAR_MIN;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final long INT_FAST16_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final long INT_FAST32_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final long INT_FAST16_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final long INT_FAST32_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final long UINT_FAST16_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final long UINT_FAST32_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WINT_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    private static final int RKNN_ERR_FAIL = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define RKNN_ERR_FAIL -1
     * }
     */
    public static int RKNN_ERR_FAIL() {
        return RKNN_ERR_FAIL;
    }
    private static final int RKNN_ERR_TIMEOUT = (int)-2L;
    /**
     * {@snippet lang=c :
     * #define RKNN_ERR_TIMEOUT -2
     * }
     */
    public static int RKNN_ERR_TIMEOUT() {
        return RKNN_ERR_TIMEOUT;
    }
    private static final int RKNN_ERR_DEVICE_UNAVAILABLE = (int)-3L;
    /**
     * {@snippet lang=c :
     * #define RKNN_ERR_DEVICE_UNAVAILABLE -3
     * }
     */
    public static int RKNN_ERR_DEVICE_UNAVAILABLE() {
        return RKNN_ERR_DEVICE_UNAVAILABLE;
    }
    private static final int RKNN_ERR_MALLOC_FAIL = (int)-4L;
    /**
     * {@snippet lang=c :
     * #define RKNN_ERR_MALLOC_FAIL -4
     * }
     */
    public static int RKNN_ERR_MALLOC_FAIL() {
        return RKNN_ERR_MALLOC_FAIL;
    }
    private static final int RKNN_ERR_PARAM_INVALID = (int)-5L;
    /**
     * {@snippet lang=c :
     * #define RKNN_ERR_PARAM_INVALID -5
     * }
     */
    public static int RKNN_ERR_PARAM_INVALID() {
        return RKNN_ERR_PARAM_INVALID;
    }
    private static final int RKNN_ERR_MODEL_INVALID = (int)-6L;
    /**
     * {@snippet lang=c :
     * #define RKNN_ERR_MODEL_INVALID -6
     * }
     */
    public static int RKNN_ERR_MODEL_INVALID() {
        return RKNN_ERR_MODEL_INVALID;
    }
    private static final int RKNN_ERR_CTX_INVALID = (int)-7L;
    /**
     * {@snippet lang=c :
     * #define RKNN_ERR_CTX_INVALID -7
     * }
     */
    public static int RKNN_ERR_CTX_INVALID() {
        return RKNN_ERR_CTX_INVALID;
    }
    private static final int RKNN_ERR_INPUT_INVALID = (int)-8L;
    /**
     * {@snippet lang=c :
     * #define RKNN_ERR_INPUT_INVALID -8
     * }
     */
    public static int RKNN_ERR_INPUT_INVALID() {
        return RKNN_ERR_INPUT_INVALID;
    }
    private static final int RKNN_ERR_OUTPUT_INVALID = (int)-9L;
    /**
     * {@snippet lang=c :
     * #define RKNN_ERR_OUTPUT_INVALID -9
     * }
     */
    public static int RKNN_ERR_OUTPUT_INVALID() {
        return RKNN_ERR_OUTPUT_INVALID;
    }
    private static final int RKNN_ERR_DEVICE_UNMATCH = (int)-10L;
    /**
     * {@snippet lang=c :
     * #define RKNN_ERR_DEVICE_UNMATCH -10
     * }
     */
    public static int RKNN_ERR_DEVICE_UNMATCH() {
        return RKNN_ERR_DEVICE_UNMATCH;
    }
    private static final int RKNN_ERR_INCOMPATILE_PRE_COMPILE_MODEL = (int)-11L;
    /**
     * {@snippet lang=c :
     * #define RKNN_ERR_INCOMPATILE_PRE_COMPILE_MODEL -11
     * }
     */
    public static int RKNN_ERR_INCOMPATILE_PRE_COMPILE_MODEL() {
        return RKNN_ERR_INCOMPATILE_PRE_COMPILE_MODEL;
    }
    private static final int RKNN_ERR_INCOMPATILE_OPTIMIZATION_LEVEL_VERSION = (int)-12L;
    /**
     * {@snippet lang=c :
     * #define RKNN_ERR_INCOMPATILE_OPTIMIZATION_LEVEL_VERSION -12
     * }
     */
    public static int RKNN_ERR_INCOMPATILE_OPTIMIZATION_LEVEL_VERSION() {
        return RKNN_ERR_INCOMPATILE_OPTIMIZATION_LEVEL_VERSION;
    }
    private static final int RKNN_ERR_TARGET_PLATFORM_UNMATCH = (int)-13L;
    /**
     * {@snippet lang=c :
     * #define RKNN_ERR_TARGET_PLATFORM_UNMATCH -13
     * }
     */
    public static int RKNN_ERR_TARGET_PLATFORM_UNMATCH() {
        return RKNN_ERR_TARGET_PLATFORM_UNMATCH;
    }
}

