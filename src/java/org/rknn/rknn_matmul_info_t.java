// Generated by jextract

package org.rknn;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rknn_matmul_info_t {
 *     int32_t M;
 *     int32_t K;
 *     int32_t N;
 *     rknn_matmul_type type;
 *     int16_t B_layout;
 *     int16_t B_quant_type;
 *     int16_t AC_layout;
 *     int16_t AC_quant_type;
 *     int32_t iommu_domain_id;
 *     int8_t reserved[36];
 * }
 * }
 */
public class rknn_matmul_info_t {

    rknn_matmul_info_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        rknn_matmul_api_h.C_INT.withName("M"),
        rknn_matmul_api_h.C_INT.withName("K"),
        rknn_matmul_api_h.C_INT.withName("N"),
        rknn_matmul_api_h.C_INT.withName("type"),
        rknn_matmul_api_h.C_SHORT.withName("B_layout"),
        rknn_matmul_api_h.C_SHORT.withName("B_quant_type"),
        rknn_matmul_api_h.C_SHORT.withName("AC_layout"),
        rknn_matmul_api_h.C_SHORT.withName("AC_quant_type"),
        rknn_matmul_api_h.C_INT.withName("iommu_domain_id"),
        MemoryLayout.sequenceLayout(36, rknn_matmul_api_h.C_CHAR).withName("reserved")
    ).withName("rknn_matmul_info_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt M$LAYOUT = (OfInt)$LAYOUT.select(groupElement("M"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t M
     * }
     */
    public static final OfInt M$layout() {
        return M$LAYOUT;
    }

    private static final long M$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t M
     * }
     */
    public static final long M$offset() {
        return M$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t M
     * }
     */
    public static int M(MemorySegment struct) {
        return struct.get(M$LAYOUT, M$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t M
     * }
     */
    public static void M(MemorySegment struct, int fieldValue) {
        struct.set(M$LAYOUT, M$OFFSET, fieldValue);
    }

    private static final OfInt K$LAYOUT = (OfInt)$LAYOUT.select(groupElement("K"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t K
     * }
     */
    public static final OfInt K$layout() {
        return K$LAYOUT;
    }

    private static final long K$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t K
     * }
     */
    public static final long K$offset() {
        return K$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t K
     * }
     */
    public static int K(MemorySegment struct) {
        return struct.get(K$LAYOUT, K$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t K
     * }
     */
    public static void K(MemorySegment struct, int fieldValue) {
        struct.set(K$LAYOUT, K$OFFSET, fieldValue);
    }

    private static final OfInt N$LAYOUT = (OfInt)$LAYOUT.select(groupElement("N"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t N
     * }
     */
    public static final OfInt N$layout() {
        return N$LAYOUT;
    }

    private static final long N$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t N
     * }
     */
    public static final long N$offset() {
        return N$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t N
     * }
     */
    public static int N(MemorySegment struct) {
        return struct.get(N$LAYOUT, N$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t N
     * }
     */
    public static void N(MemorySegment struct, int fieldValue) {
        struct.set(N$LAYOUT, N$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rknn_matmul_type type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rknn_matmul_type type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rknn_matmul_type type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rknn_matmul_type type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfShort B_layout$LAYOUT = (OfShort)$LAYOUT.select(groupElement("B_layout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t B_layout
     * }
     */
    public static final OfShort B_layout$layout() {
        return B_layout$LAYOUT;
    }

    private static final long B_layout$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t B_layout
     * }
     */
    public static final long B_layout$offset() {
        return B_layout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t B_layout
     * }
     */
    public static short B_layout(MemorySegment struct) {
        return struct.get(B_layout$LAYOUT, B_layout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t B_layout
     * }
     */
    public static void B_layout(MemorySegment struct, short fieldValue) {
        struct.set(B_layout$LAYOUT, B_layout$OFFSET, fieldValue);
    }

    private static final OfShort B_quant_type$LAYOUT = (OfShort)$LAYOUT.select(groupElement("B_quant_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t B_quant_type
     * }
     */
    public static final OfShort B_quant_type$layout() {
        return B_quant_type$LAYOUT;
    }

    private static final long B_quant_type$OFFSET = 18;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t B_quant_type
     * }
     */
    public static final long B_quant_type$offset() {
        return B_quant_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t B_quant_type
     * }
     */
    public static short B_quant_type(MemorySegment struct) {
        return struct.get(B_quant_type$LAYOUT, B_quant_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t B_quant_type
     * }
     */
    public static void B_quant_type(MemorySegment struct, short fieldValue) {
        struct.set(B_quant_type$LAYOUT, B_quant_type$OFFSET, fieldValue);
    }

    private static final OfShort AC_layout$LAYOUT = (OfShort)$LAYOUT.select(groupElement("AC_layout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t AC_layout
     * }
     */
    public static final OfShort AC_layout$layout() {
        return AC_layout$LAYOUT;
    }

    private static final long AC_layout$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t AC_layout
     * }
     */
    public static final long AC_layout$offset() {
        return AC_layout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t AC_layout
     * }
     */
    public static short AC_layout(MemorySegment struct) {
        return struct.get(AC_layout$LAYOUT, AC_layout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t AC_layout
     * }
     */
    public static void AC_layout(MemorySegment struct, short fieldValue) {
        struct.set(AC_layout$LAYOUT, AC_layout$OFFSET, fieldValue);
    }

    private static final OfShort AC_quant_type$LAYOUT = (OfShort)$LAYOUT.select(groupElement("AC_quant_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t AC_quant_type
     * }
     */
    public static final OfShort AC_quant_type$layout() {
        return AC_quant_type$LAYOUT;
    }

    private static final long AC_quant_type$OFFSET = 22;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t AC_quant_type
     * }
     */
    public static final long AC_quant_type$offset() {
        return AC_quant_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t AC_quant_type
     * }
     */
    public static short AC_quant_type(MemorySegment struct) {
        return struct.get(AC_quant_type$LAYOUT, AC_quant_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t AC_quant_type
     * }
     */
    public static void AC_quant_type(MemorySegment struct, short fieldValue) {
        struct.set(AC_quant_type$LAYOUT, AC_quant_type$OFFSET, fieldValue);
    }

    private static final OfInt iommu_domain_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iommu_domain_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t iommu_domain_id
     * }
     */
    public static final OfInt iommu_domain_id$layout() {
        return iommu_domain_id$LAYOUT;
    }

    private static final long iommu_domain_id$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t iommu_domain_id
     * }
     */
    public static final long iommu_domain_id$offset() {
        return iommu_domain_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t iommu_domain_id
     * }
     */
    public static int iommu_domain_id(MemorySegment struct) {
        return struct.get(iommu_domain_id$LAYOUT, iommu_domain_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t iommu_domain_id
     * }
     */
    public static void iommu_domain_id(MemorySegment struct, int fieldValue) {
        struct.set(iommu_domain_id$LAYOUT, iommu_domain_id$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t reserved[36]
     * }
     */
    public static final SequenceLayout reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t reserved[36]
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t reserved[36]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct) {
        return struct.asSlice(reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t reserved[36]
     * }
     */
    public static void reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    private static long[] reserved$DIMS = { 36 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int8_t reserved[36]
     * }
     */
    public static long[] reserved$dimensions() {
        return reserved$DIMS;
    }
    private static final VarHandle reserved$ELEM_HANDLE = reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int8_t reserved[36]
     * }
     */
    public static byte reserved(MemorySegment struct, long index0) {
        return (byte)reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int8_t reserved[36]
     * }
     */
    public static void reserved(MemorySegment struct, long index0, byte fieldValue) {
        reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

