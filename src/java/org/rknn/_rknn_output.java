// Generated by jextract

package org.rknn;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _rknn_output {
 *     uint8_t want_float;
 *     uint8_t is_prealloc;
 *     uint32_t index;
 *     void *buf;
 *     uint32_t size;
 * }
 * }
 */
public class _rknn_output {

    _rknn_output() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        rknn_matmul_api_h.C_CHAR.withName("want_float"),
        rknn_matmul_api_h.C_CHAR.withName("is_prealloc"),
        MemoryLayout.paddingLayout(2),
        rknn_matmul_api_h.C_INT.withName("index"),
        rknn_matmul_api_h.C_POINTER.withName("buf"),
        rknn_matmul_api_h.C_INT.withName("size"),
        MemoryLayout.paddingLayout(4)
    ).withName("_rknn_output");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte want_float$LAYOUT = (OfByte)$LAYOUT.select(groupElement("want_float"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t want_float
     * }
     */
    public static final OfByte want_float$layout() {
        return want_float$LAYOUT;
    }

    private static final long want_float$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t want_float
     * }
     */
    public static final long want_float$offset() {
        return want_float$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t want_float
     * }
     */
    public static byte want_float(MemorySegment struct) {
        return struct.get(want_float$LAYOUT, want_float$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t want_float
     * }
     */
    public static void want_float(MemorySegment struct, byte fieldValue) {
        struct.set(want_float$LAYOUT, want_float$OFFSET, fieldValue);
    }

    private static final OfByte is_prealloc$LAYOUT = (OfByte)$LAYOUT.select(groupElement("is_prealloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t is_prealloc
     * }
     */
    public static final OfByte is_prealloc$layout() {
        return is_prealloc$LAYOUT;
    }

    private static final long is_prealloc$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t is_prealloc
     * }
     */
    public static final long is_prealloc$offset() {
        return is_prealloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t is_prealloc
     * }
     */
    public static byte is_prealloc(MemorySegment struct) {
        return struct.get(is_prealloc$LAYOUT, is_prealloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t is_prealloc
     * }
     */
    public static void is_prealloc(MemorySegment struct, byte fieldValue) {
        struct.set(is_prealloc$LAYOUT, is_prealloc$OFFSET, fieldValue);
    }

    private static final OfInt index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t index
     * }
     */
    public static final OfInt index$layout() {
        return index$LAYOUT;
    }

    private static final long index$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t index
     * }
     */
    public static final long index$offset() {
        return index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t index
     * }
     */
    public static int index(MemorySegment struct) {
        return struct.get(index$LAYOUT, index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t index
     * }
     */
    public static void index(MemorySegment struct, int fieldValue) {
        struct.set(index$LAYOUT, index$OFFSET, fieldValue);
    }

    private static final AddressLayout buf$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *buf
     * }
     */
    public static final AddressLayout buf$layout() {
        return buf$LAYOUT;
    }

    private static final long buf$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *buf
     * }
     */
    public static final long buf$offset() {
        return buf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *buf
     * }
     */
    public static MemorySegment buf(MemorySegment struct) {
        return struct.get(buf$LAYOUT, buf$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *buf
     * }
     */
    public static void buf(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buf$LAYOUT, buf$OFFSET, fieldValue);
    }

    private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static final OfInt size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static int size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static void size(MemorySegment struct, int fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

