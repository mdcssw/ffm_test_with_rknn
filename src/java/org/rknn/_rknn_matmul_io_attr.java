// Generated by jextract

package org.rknn;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _rknn_matmul_io_attr {
 *     rknn_matmul_tensor_attr A;
 *     rknn_matmul_tensor_attr B;
 *     rknn_matmul_tensor_attr C;
 * }
 * }
 */
public class _rknn_matmul_io_attr {

    _rknn_matmul_io_attr() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _rknn_matmul_tensor_attr.layout().withName("A"),
        _rknn_matmul_tensor_attr.layout().withName("B"),
        _rknn_matmul_tensor_attr.layout().withName("C")
    ).withName("_rknn_matmul_io_attr");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout A$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("A"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rknn_matmul_tensor_attr A
     * }
     */
    public static final GroupLayout A$layout() {
        return A$LAYOUT;
    }

    private static final long A$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rknn_matmul_tensor_attr A
     * }
     */
    public static final long A$offset() {
        return A$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rknn_matmul_tensor_attr A
     * }
     */
    public static MemorySegment A(MemorySegment struct) {
        return struct.asSlice(A$OFFSET, A$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rknn_matmul_tensor_attr A
     * }
     */
    public static void A(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, A$OFFSET, A$LAYOUT.byteSize());
    }

    private static final GroupLayout B$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("B"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rknn_matmul_tensor_attr B
     * }
     */
    public static final GroupLayout B$layout() {
        return B$LAYOUT;
    }

    private static final long B$OFFSET = 332;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rknn_matmul_tensor_attr B
     * }
     */
    public static final long B$offset() {
        return B$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rknn_matmul_tensor_attr B
     * }
     */
    public static MemorySegment B(MemorySegment struct) {
        return struct.asSlice(B$OFFSET, B$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rknn_matmul_tensor_attr B
     * }
     */
    public static void B(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, B$OFFSET, B$LAYOUT.byteSize());
    }

    private static final GroupLayout C$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("C"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * rknn_matmul_tensor_attr C
     * }
     */
    public static final GroupLayout C$layout() {
        return C$LAYOUT;
    }

    private static final long C$OFFSET = 664;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * rknn_matmul_tensor_attr C
     * }
     */
    public static final long C$offset() {
        return C$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * rknn_matmul_tensor_attr C
     * }
     */
    public static MemorySegment C(MemorySegment struct) {
        return struct.asSlice(C$OFFSET, C$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * rknn_matmul_tensor_attr C
     * }
     */
    public static void C(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, C$OFFSET, C$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

